export default [
    {
      "statements": [
        "CREATE TYPE \"UserRole\" AS ENUM (\n 'USER',\n 'ADMIN'\n)",
        "CREATE TABLE \"User\" (\n    id text NOT NULL,\n    name text,\n    email text,\n    \"emailVerified\" timestamp(3) without time zone,\n    image text,\n    \"userRole\" \"UserRole\" NOT NULL,\n    CONSTRAINT \"User_pkey\" PRIMARY KEY (id)\n)",
        "CREATE UNIQUE INDEX \"User_email_key\" ON public.\"User\" USING btree (email)",
        "CREATE TABLE \"Account\" (\n    id text NOT NULL,\n    type text NOT NULL,\n    provider text NOT NULL,\n    \"providerAccountId\" text NOT NULL,\n    refresh_token text,\n    access_token text,\n    expires_at integer,\n    token_type text,\n    scope text,\n    id_token text,\n    session_state text,\n    \"userId\" text NOT NULL,\n    CONSTRAINT \"Account_pkey\" PRIMARY KEY (id),\n    CONSTRAINT \"Account_userId_fkey\" FOREIGN KEY (\"userId\") REFERENCES \"User\"(id) ON UPDATE CASCADE ON DELETE CASCADE\n)",
        "CREATE UNIQUE INDEX \"Account_provider_providerAccountId_key\" ON public.\"Account\" USING btree (provider, \"providerAccountId\")",
        "CREATE TABLE \"Session\" (\n    id text NOT NULL,\n    \"sessionToken\" text NOT NULL,\n    expires timestamp(3) without time zone NOT NULL,\n    \"userId\" text NOT NULL,\n    CONSTRAINT \"Session_pkey\" PRIMARY KEY (id),\n    CONSTRAINT \"Session_userId_fkey\" FOREIGN KEY (\"userId\") REFERENCES \"User\"(id) ON UPDATE CASCADE ON DELETE CASCADE\n)",
        "CREATE UNIQUE INDEX \"Session_sessionToken_key\" ON public.\"Session\" USING btree (\"sessionToken\")",
        "CREATE TABLE \"Post\" (\n    id text NOT NULL,\n    name text NOT NULL,\n    \"createdAt\" timestamp(3) without time zone NOT NULL,\n    \"updatedAt\" timestamp(3) without time zone NOT NULL,\n    \"createdById\" text NOT NULL,\n    CONSTRAINT \"Post_pkey\" PRIMARY KEY (id),\n    CONSTRAINT \"Post_createdById_fkey\" FOREIGN KEY (\"createdById\") REFERENCES \"User\"(id) ON UPDATE CASCADE ON DELETE RESTRICT\n)",
        "CREATE INDEX \"Post_name_idx\" ON public.\"Post\" USING btree (name)",
        "CREATE TABLE \"UserCreateData\" (\n    \"userId\" text NOT NULL,\n    CONSTRAINT \"UserCreateData_pkey\" PRIMARY KEY (\"userId\"),\n    CONSTRAINT \"UserCreateData_userId_fkey\" FOREIGN KEY (\"userId\") REFERENCES \"User\"(id) ON UPDATE CASCADE ON DELETE CASCADE\n)",
        "CREATE TABLE \"UserUpdateData\" (\n    \"userId\" text NOT NULL,\n    CONSTRAINT \"UserUpdateData_pkey\" PRIMARY KEY (\"userId\"),\n    CONSTRAINT \"UserUpdateData_userId_fkey\" FOREIGN KEY (\"userId\") REFERENCES \"User\"(id) ON UPDATE CASCADE ON DELETE CASCADE\n)",
        "CREATE TYPE \"MonsterType\" AS ENUM (\n 'COMMON_MOBS',\n 'COMMON_MINI_BOSS',\n 'COMMON_BOSS',\n 'EVENT_MOBS',\n 'EVENT_MINI_BOSS',\n 'EVENT_BOSS'\n)",
        "CREATE TYPE \"Element\" AS ENUM (\n 'NO_ELEMENT',\n 'LIGHT',\n 'DARK',\n 'WATER',\n 'FIRE',\n 'EARTH',\n 'WIND'\n)",
        "CREATE TABLE \"Monster\" (\n    id text NOT NULL,\n    name text NOT NULL,\n    \"monsterType\" \"MonsterType\" NOT NULL,\n    \"baseLv\" integer,\n    experience integer,\n    address text,\n    element \"Element\" NOT NULL,\n    radius integer,\n    maxhp integer,\n    \"physicalDefense\" integer,\n    \"physicalResistance\" integer,\n    \"magicalDefense\" integer,\n    \"magicalResistance\" integer,\n    \"criticalResistance\" integer,\n    avoidance integer,\n    dodge integer,\n    block integer,\n    \"normalAttackResistanceModifier\" integer,\n    \"physicalAttackResistanceModifier\" integer,\n    \"magicalAttackResistanceModifier\" integer,\n    \"difficultyOfTank\" integer NOT NULL,\n    \"difficultyOfMelee\" integer NOT NULL,\n    \"difficultyOfRanged\" integer NOT NULL,\n    \"possibilityOfRunningAround\" integer NOT NULL,\n    \"extraDetails\" text,\n    \"dataSources\" text,\n    \"updatedAt\" timestamp(3) without time zone NOT NULL,\n    \"updatedByUserId\" text,\n    \"createdAt\" timestamp(3) without time zone NOT NULL,\n    \"createdByUserId\" text,\n    \"statisticsId\" text,\n    CONSTRAINT \"Monster_pkey\" PRIMARY KEY (id),\n    CONSTRAINT \"Monster_createdByUserId_fkey\" FOREIGN KEY (\"createdByUserId\") REFERENCES \"UserCreateData\"(\"userId\") ON UPDATE CASCADE ON DELETE SET NULL,\n    CONSTRAINT \"Monster_updatedByUserId_fkey\" FOREIGN KEY (\"updatedByUserId\") REFERENCES \"UserUpdateData\"(\"userId\") ON UPDATE CASCADE ON DELETE SET NULL\n)",
        "CREATE TABLE \"Modifier\" (\n    id text NOT NULL,\n    formula text NOT NULL,\n    CONSTRAINT \"Modifier_pkey\" PRIMARY KEY (id)\n)",
        "CREATE TABLE \"ModifiersList\" (\n    id text NOT NULL,\n    name text,\n    CONSTRAINT \"ModifiersList_pkey\" PRIMARY KEY (id)\n)",
        "CREATE TYPE \"CharacterType\" AS ENUM (\n 'Tank',\n 'Mage',\n 'Ranger',\n 'Marksman'\n)",
        "CREATE TYPE \"SpecialAbiType\" AS ENUM (\n 'NULL',\n 'LUK',\n 'CRI',\n 'TEC',\n 'MEN'\n)",
        "CREATE TYPE \"CrystalType\" AS ENUM (\n 'GENERAL',\n 'WEAPONCRYSTAL',\n 'BODYCRYSTAL',\n 'ADDITIONALCRYSTAL',\n 'SPECIALCRYSTAL'\n)",
        "CREATE TABLE \"Crystal\" (\n    id text NOT NULL,\n    name text NOT NULL,\n    \"crystalType\" \"CrystalType\" NOT NULL,\n    front integer NOT NULL,\n    \"modifiersListId\" text NOT NULL,\n    \"extraDetails\" text,\n    \"dataSources\" text,\n    \"updatedAt\" timestamp(3) without time zone NOT NULL,\n    \"updatedByUserId\" text,\n    \"createdAt\" timestamp(3) without time zone NOT NULL,\n    \"createdByUserId\" text,\n    \"statisticsId\" text,\n    CONSTRAINT \"Crystal_pkey\" PRIMARY KEY (id),\n    CONSTRAINT \"Crystal_createdByUserId_fkey\" FOREIGN KEY (\"createdByUserId\") REFERENCES \"UserCreateData\"(\"userId\") ON UPDATE CASCADE ON DELETE SET NULL,\n    CONSTRAINT \"Crystal_modifiersListId_fkey\" FOREIGN KEY (\"modifiersListId\") REFERENCES \"ModifiersList\"(id) ON UPDATE CASCADE ON DELETE RESTRICT,\n    CONSTRAINT \"Crystal_updatedByUserId_fkey\" FOREIGN KEY (\"updatedByUserId\") REFERENCES \"UserUpdateData\"(\"userId\") ON UPDATE CASCADE ON DELETE SET NULL\n)",
        "CREATE TYPE \"MainWeaponType\" AS ENUM (\n 'NO_WEAPON',\n 'ONE_HAND_SWORD',\n 'TWO_HANDS_SWORD',\n 'BOW',\n 'BOWGUN',\n 'STAFF',\n 'MAGIC_DEVICE',\n 'KNUCKLE',\n 'HALBERD',\n 'KATANA'\n)",
        "CREATE TABLE \"MainWeapon\" (\n    id text NOT NULL,\n    name text NOT NULL,\n    \"mainWeaponType\" \"MainWeaponType\" NOT NULL,\n    \"baseAtk\" integer NOT NULL,\n    refinement integer NOT NULL,\n    stability integer NOT NULL,\n    element \"Element\" NOT NULL,\n    \"modifiersListId\" text NOT NULL,\n    \"extraDetails\" text,\n    \"dataSources\" text,\n    \"updatedAt\" timestamp(3) without time zone NOT NULL,\n    \"updatedByUserId\" text,\n    \"createdAt\" timestamp(3) without time zone NOT NULL,\n    \"createdByUserId\" text,\n    \"statisticsId\" text,\n    CONSTRAINT \"MainWeapon_pkey\" PRIMARY KEY (id),\n    CONSTRAINT \"MainWeapon_createdByUserId_fkey\" FOREIGN KEY (\"createdByUserId\") REFERENCES \"UserCreateData\"(\"userId\") ON UPDATE CASCADE ON DELETE SET NULL,\n    CONSTRAINT \"MainWeapon_modifiersListId_fkey\" FOREIGN KEY (\"modifiersListId\") REFERENCES \"ModifiersList\"(id) ON UPDATE CASCADE ON DELETE RESTRICT,\n    CONSTRAINT \"MainWeapon_updatedByUserId_fkey\" FOREIGN KEY (\"updatedByUserId\") REFERENCES \"UserUpdateData\"(\"userId\") ON UPDATE CASCADE ON DELETE SET NULL\n)",
        "CREATE TYPE \"SubWeaponType\" AS ENUM (\n 'NO_WEAPON',\n 'ONE_HAND_SWORD',\n 'MAGIC_DEVICE',\n 'KNUCKLE',\n 'KATANA',\n 'ARROW',\n 'DAGGER',\n 'NINJUTSUSCROLL',\n 'SHIELD'\n)",
        "CREATE TABLE \"SubWeapon\" (\n    id text NOT NULL,\n    name text NOT NULL,\n    \"subWeaponType\" \"SubWeaponType\" NOT NULL,\n    \"baseAtk\" integer NOT NULL,\n    refinement integer NOT NULL,\n    stability integer NOT NULL,\n    element \"Element\" NOT NULL,\n    \"modifiersListId\" text NOT NULL,\n    \"extraDetails\" text,\n    \"dataSources\" text,\n    \"updatedAt\" timestamp(3) without time zone NOT NULL,\n    \"updatedByUserId\" text,\n    \"createdAt\" timestamp(3) without time zone NOT NULL,\n    \"createdByUserId\" text,\n    \"statisticsId\" text,\n    CONSTRAINT \"SubWeapon_pkey\" PRIMARY KEY (id),\n    CONSTRAINT \"SubWeapon_createdByUserId_fkey\" FOREIGN KEY (\"createdByUserId\") REFERENCES \"UserCreateData\"(\"userId\") ON UPDATE CASCADE ON DELETE SET NULL,\n    CONSTRAINT \"SubWeapon_modifiersListId_fkey\" FOREIGN KEY (\"modifiersListId\") REFERENCES \"ModifiersList\"(id) ON UPDATE CASCADE ON DELETE RESTRICT,\n    CONSTRAINT \"SubWeapon_updatedByUserId_fkey\" FOREIGN KEY (\"updatedByUserId\") REFERENCES \"UserUpdateData\"(\"userId\") ON UPDATE CASCADE ON DELETE SET NULL\n)",
        "CREATE TYPE \"BodyArmorType\" AS ENUM (\n 'NORMAL',\n 'LIGHT',\n 'HEAVY'\n)",
        "CREATE TABLE \"BodyArmor\" (\n    id text NOT NULL,\n    name text NOT NULL,\n    \"bodyArmorType\" \"BodyArmorType\" NOT NULL,\n    refinement integer NOT NULL,\n    \"baseDef\" integer NOT NULL,\n    \"modifiersListId\" text NOT NULL,\n    \"extraDetails\" text,\n    \"dataSources\" text,\n    \"updatedAt\" timestamp(3) without time zone NOT NULL,\n    \"updatedByUserId\" text,\n    \"createdAt\" timestamp(3) without time zone NOT NULL,\n    \"createdByUserId\" text,\n    \"statisticsId\" text,\n    CONSTRAINT \"BodyArmor_pkey\" PRIMARY KEY (id),\n    CONSTRAINT \"BodyArmor_createdByUserId_fkey\" FOREIGN KEY (\"createdByUserId\") REFERENCES \"UserCreateData\"(\"userId\") ON UPDATE CASCADE ON DELETE SET NULL,\n    CONSTRAINT \"BodyArmor_modifiersListId_fkey\" FOREIGN KEY (\"modifiersListId\") REFERENCES \"ModifiersList\"(id) ON UPDATE CASCADE ON DELETE RESTRICT,\n    CONSTRAINT \"BodyArmor_updatedByUserId_fkey\" FOREIGN KEY (\"updatedByUserId\") REFERENCES \"UserUpdateData\"(\"userId\") ON UPDATE CASCADE ON DELETE SET NULL\n)",
        "CREATE TABLE \"AdditionalEquipment\" (\n    id text NOT NULL,\n    name text NOT NULL,\n    refinement integer NOT NULL,\n    \"modifiersListId\" text NOT NULL,\n    \"extraDetails\" text,\n    \"dataSources\" text,\n    \"updatedAt\" timestamp(3) without time zone NOT NULL,\n    \"updatedByUserId\" text,\n    \"createdAt\" timestamp(3) without time zone NOT NULL,\n    \"createdByUserId\" text,\n    \"statisticsId\" text,\n    CONSTRAINT \"AdditionalEquipment_pkey\" PRIMARY KEY (id),\n    CONSTRAINT \"AdditionalEquipment_createdByUserId_fkey\" FOREIGN KEY (\"createdByUserId\") REFERENCES \"UserCreateData\"(\"userId\") ON UPDATE CASCADE ON DELETE SET NULL,\n    CONSTRAINT \"AdditionalEquipment_modifiersListId_fkey\" FOREIGN KEY (\"modifiersListId\") REFERENCES \"ModifiersList\"(id) ON UPDATE CASCADE ON DELETE RESTRICT,\n    CONSTRAINT \"AdditionalEquipment_updatedByUserId_fkey\" FOREIGN KEY (\"updatedByUserId\") REFERENCES \"UserUpdateData\"(\"userId\") ON UPDATE CASCADE ON DELETE SET NULL\n)",
        "CREATE TABLE \"SpecialEquipment\" (\n    id text NOT NULL,\n    name text NOT NULL,\n    \"modifiersListId\" text NOT NULL,\n    \"extraDetails\" text,\n    \"dataSources\" text,\n    \"updatedAt\" timestamp(3) without time zone NOT NULL,\n    \"updatedByUserId\" text,\n    \"createdAt\" timestamp(3) without time zone NOT NULL,\n    \"createdByUserId\" text,\n    \"statisticsId\" text,\n    CONSTRAINT \"SpecialEquipment_pkey\" PRIMARY KEY (id),\n    CONSTRAINT \"SpecialEquipment_createdByUserId_fkey\" FOREIGN KEY (\"createdByUserId\") REFERENCES \"UserCreateData\"(\"userId\") ON UPDATE CASCADE ON DELETE SET NULL,\n    CONSTRAINT \"SpecialEquipment_modifiersListId_fkey\" FOREIGN KEY (\"modifiersListId\") REFERENCES \"ModifiersList\"(id) ON UPDATE CASCADE ON DELETE RESTRICT,\n    CONSTRAINT \"SpecialEquipment_updatedByUserId_fkey\" FOREIGN KEY (\"updatedByUserId\") REFERENCES \"UserUpdateData\"(\"userId\") ON UPDATE CASCADE ON DELETE SET NULL\n)",
        "CREATE TYPE \"SkillTreeName\" AS ENUM (\n 'BLADE',\n 'SHOT',\n 'MAGIC',\n 'MARTIAL',\n 'DUALSWORD',\n 'HALBERD',\n 'MONONOFU',\n 'CRUSHER',\n 'SPRITE'\n)",
        "CREATE TYPE \"SkillType\" AS ENUM (\n 'ACTIVE_SKILL',\n 'PASSIVE_SKILL'\n)",
        "CREATE TYPE \"WeaponElementDependencyType\" AS ENUM (\n 'TRUE',\n 'FALSE'\n)",
        "CREATE TABLE \"Skill\" (\n    id text NOT NULL,\n    \"skillTreeName\" \"SkillTreeName\" NOT NULL,\n    name text NOT NULL,\n    \"skillType\" \"SkillType\" NOT NULL,\n    \"weaponElementDependencyType\" \"WeaponElementDependencyType\" NOT NULL,\n    element \"Element\" NOT NULL,\n    \"skillDescription\" text,\n    \"extraDetails\" text,\n    \"dataSources\" text,\n    \"updatedAt\" timestamp(3) without time zone NOT NULL,\n    \"updatedByUserId\" text,\n    \"createdAt\" timestamp(3) without time zone NOT NULL,\n    \"createdByUserId\" text,\n    \"statisticsId\" text,\n    CONSTRAINT \"Skill_pkey\" PRIMARY KEY (id),\n    CONSTRAINT \"Skill_createdByUserId_fkey\" FOREIGN KEY (\"createdByUserId\") REFERENCES \"UserCreateData\"(\"userId\") ON UPDATE CASCADE ON DELETE SET NULL,\n    CONSTRAINT \"Skill_updatedByUserId_fkey\" FOREIGN KEY (\"updatedByUserId\") REFERENCES \"UserUpdateData\"(\"userId\") ON UPDATE CASCADE ON DELETE SET NULL\n)",
        "CREATE TYPE \"SkillExtraActionType\" AS ENUM (\n 'None',\n 'Chanting',\n 'Charging'\n)",
        "CREATE TABLE \"SkillEffect\" (\n    id text NOT NULL,\n    condition text NOT NULL,\n    description text,\n    \"actionBaseDurationFormula\" text NOT NULL,\n    \"actionModifiableDurationFormula\" text NOT NULL,\n    \"skillExtraActionType\" \"SkillExtraActionType\" NOT NULL,\n    \"chantingBaseDurationFormula\" text NOT NULL,\n    \"chantingModifiableDurationFormula\" text NOT NULL,\n    \"chargingBaseDurationFormula\" text NOT NULL,\n    \"chargingModifiableDurationFormula\" text NOT NULL,\n    \"skillStartupFramesFormula\" text,\n    \"belongToskillId\" text NOT NULL,\n    CONSTRAINT \"SkillEffect_pkey\" PRIMARY KEY (id),\n    CONSTRAINT \"SkillEffect_belongToskillId_fkey\" FOREIGN KEY (\"belongToskillId\") REFERENCES \"Skill\"(id) ON UPDATE CASCADE ON DELETE CASCADE\n)",
        "CREATE TABLE \"SkillCost\" (\n    id text NOT NULL,\n    name text,\n    \"costFormula\" text NOT NULL,\n    \"skillEffectId\" text,\n    CONSTRAINT \"SkillCost_pkey\" PRIMARY KEY (id),\n    CONSTRAINT \"SkillCost_skillEffectId_fkey\" FOREIGN KEY (\"skillEffectId\") REFERENCES \"SkillEffect\"(id) ON UPDATE CASCADE ON DELETE CASCADE\n)",
        "CREATE TYPE \"YieldType\" AS ENUM (\n 'ImmediateEffect',\n 'PersistentEffect'\n)",
        "CREATE TABLE \"SkillYield\" (\n    id text NOT NULL,\n    name text,\n    \"yieldType\" \"YieldType\" NOT NULL,\n    \"yieldFormula\" text NOT NULL,\n    \"mutationTimingFormula\" text,\n    \"skillEffectId\" text,\n    CONSTRAINT \"SkillYield_pkey\" PRIMARY KEY (id),\n    CONSTRAINT \"SkillYield_skillEffectId_fkey\" FOREIGN KEY (\"skillEffectId\") REFERENCES \"SkillEffect\"(id) ON UPDATE CASCADE ON DELETE CASCADE\n)",
        "CREATE TABLE \"Pet\" (\n    id text NOT NULL,\n    name text,\n    \"extraDetails\" text,\n    \"dataSources\" text,\n    \"updatedAt\" timestamp(3) without time zone NOT NULL,\n    \"updatedByUserId\" text,\n    \"createdAt\" timestamp(3) without time zone NOT NULL,\n    \"createdByUserId\" text,\n    \"statisticsId\" text,\n    CONSTRAINT \"Pet_pkey\" PRIMARY KEY (id),\n    CONSTRAINT \"Pet_createdByUserId_fkey\" FOREIGN KEY (\"createdByUserId\") REFERENCES \"UserCreateData\"(\"userId\") ON UPDATE CASCADE ON DELETE SET NULL,\n    CONSTRAINT \"Pet_updatedByUserId_fkey\" FOREIGN KEY (\"updatedByUserId\") REFERENCES \"UserUpdateData\"(\"userId\") ON UPDATE CASCADE ON DELETE SET NULL\n)",
        "CREATE TABLE \"Consumable\" (\n    id text NOT NULL,\n    name text NOT NULL,\n    \"modifiersListId\" text NOT NULL,\n    \"extraDetails\" text,\n    \"dataSources\" text,\n    \"updatedAt\" timestamp(3) without time zone NOT NULL,\n    \"updatedByUserId\" text,\n    \"createdAt\" timestamp(3) without time zone NOT NULL,\n    \"createdByUserId\" text,\n    \"statisticsId\" text,\n    CONSTRAINT \"Consumable_pkey\" PRIMARY KEY (id),\n    CONSTRAINT \"Consumable_createdByUserId_fkey\" FOREIGN KEY (\"createdByUserId\") REFERENCES \"UserCreateData\"(\"userId\") ON UPDATE CASCADE ON DELETE SET NULL,\n    CONSTRAINT \"Consumable_modifiersListId_fkey\" FOREIGN KEY (\"modifiersListId\") REFERENCES \"ModifiersList\"(id) ON UPDATE CASCADE ON DELETE RESTRICT,\n    CONSTRAINT \"Consumable_updatedByUserId_fkey\" FOREIGN KEY (\"updatedByUserId\") REFERENCES \"UserUpdateData\"(\"userId\") ON UPDATE CASCADE ON DELETE SET NULL\n)",
        "CREATE TABLE \"Combo\" (\n    id text NOT NULL,\n    name text,\n    \"userCreateUserId\" text,\n    CONSTRAINT \"Combo_pkey\" PRIMARY KEY (id),\n    CONSTRAINT \"Combo_userCreateUserId_fkey\" FOREIGN KEY (\"userCreateUserId\") REFERENCES \"UserCreateData\"(\"userId\") ON UPDATE CASCADE ON DELETE SET NULL\n)",
        "CREATE TYPE \"ComboType\" AS ENUM (\n 'NULL'\n)",
        "CREATE TABLE \"ComboStep\" (\n    id text NOT NULL,\n    \"order\" integer NOT NULL,\n    \"comboType\" \"ComboType\" NOT NULL,\n    \"skillId\" text NOT NULL,\n    \"comboId\" text NOT NULL,\n    CONSTRAINT \"ComboStep_pkey\" PRIMARY KEY (id),\n    CONSTRAINT \"ComboStep_comboId_fkey\" FOREIGN KEY (\"comboId\") REFERENCES \"Combo\"(id) ON UPDATE CASCADE ON DELETE CASCADE,\n    CONSTRAINT \"ComboStep_skillId_fkey\" FOREIGN KEY (\"skillId\") REFERENCES \"Skill\"(id) ON UPDATE CASCADE ON DELETE CASCADE\n)",
        "CREATE TABLE \"Character\" (\n    id text NOT NULL,\n    name text NOT NULL,\n    \"characterType\" \"CharacterType\" NOT NULL,\n    lv integer NOT NULL,\n    \"baseStr\" integer NOT NULL,\n    \"baseInt\" integer NOT NULL,\n    \"baseVit\" integer NOT NULL,\n    \"baseAgi\" integer NOT NULL,\n    \"baseDex\" integer NOT NULL,\n    \"specialAbiType\" \"SpecialAbiType\" NOT NULL,\n    \"specialAbiValue\" integer NOT NULL,\n    \"mainWeaponId\" text NOT NULL,\n    \"subWeaponId\" text NOT NULL,\n    \"bodyArmorId\" text NOT NULL,\n    \"additionalEquipmentId\" text NOT NULL,\n    \"specialEquipmentId\" text NOT NULL,\n    \"fashionModifiersListId\" text NOT NULL,\n    \"CuisineModifiersListId\" text NOT NULL,\n    \"petId\" text NOT NULL,\n    \"modifiersListId\" text NOT NULL,\n    \"extraDetails\" text,\n    \"updatedAt\" timestamp(3) without time zone NOT NULL,\n    \"updatedByUserId\" text,\n    \"createdAt\" timestamp(3) without time zone NOT NULL,\n    \"createdByUserId\" text,\n    \"statisticsId\" text,\n    CONSTRAINT \"Character_pkey\" PRIMARY KEY (id),\n    CONSTRAINT \"Character_CuisineModifiersListId_fkey\" FOREIGN KEY (\"CuisineModifiersListId\") REFERENCES \"ModifiersList\"(id) ON UPDATE CASCADE ON DELETE RESTRICT,\n    CONSTRAINT \"Character_additionalEquipmentId_fkey\" FOREIGN KEY (\"additionalEquipmentId\") REFERENCES \"AdditionalEquipment\"(id) ON UPDATE CASCADE ON DELETE RESTRICT,\n    CONSTRAINT \"Character_bodyArmorId_fkey\" FOREIGN KEY (\"bodyArmorId\") REFERENCES \"BodyArmor\"(id) ON UPDATE CASCADE ON DELETE RESTRICT,\n    CONSTRAINT \"Character_createdByUserId_fkey\" FOREIGN KEY (\"createdByUserId\") REFERENCES \"UserCreateData\"(\"userId\") ON UPDATE CASCADE ON DELETE SET NULL,\n    CONSTRAINT \"Character_fashionModifiersListId_fkey\" FOREIGN KEY (\"fashionModifiersListId\") REFERENCES \"ModifiersList\"(id) ON UPDATE CASCADE ON DELETE RESTRICT,\n    CONSTRAINT \"Character_mainWeaponId_fkey\" FOREIGN KEY (\"mainWeaponId\") REFERENCES \"MainWeapon\"(id) ON UPDATE CASCADE ON DELETE RESTRICT,\n    CONSTRAINT \"Character_modifiersListId_fkey\" FOREIGN KEY (\"modifiersListId\") REFERENCES \"ModifiersList\"(id) ON UPDATE CASCADE ON DELETE RESTRICT,\n    CONSTRAINT \"Character_petId_fkey\" FOREIGN KEY (\"petId\") REFERENCES \"Pet\"(id) ON UPDATE CASCADE ON DELETE RESTRICT,\n    CONSTRAINT \"Character_specialEquipmentId_fkey\" FOREIGN KEY (\"specialEquipmentId\") REFERENCES \"SpecialEquipment\"(id) ON UPDATE CASCADE ON DELETE RESTRICT,\n    CONSTRAINT \"Character_subWeaponId_fkey\" FOREIGN KEY (\"subWeaponId\") REFERENCES \"SubWeapon\"(id) ON UPDATE CASCADE ON DELETE RESTRICT,\n    CONSTRAINT \"Character_updatedByUserId_fkey\" FOREIGN KEY (\"updatedByUserId\") REFERENCES \"UserUpdateData\"(\"userId\") ON UPDATE CASCADE ON DELETE SET NULL\n)",
        "CREATE UNIQUE INDEX \"Character_CuisineModifiersListId_key\" ON public.\"Character\" USING btree (\"CuisineModifiersListId\")",
        "CREATE UNIQUE INDEX \"Character_fashionModifiersListId_key\" ON public.\"Character\" USING btree (\"fashionModifiersListId\")",
        "CREATE UNIQUE INDEX \"Character_modifiersListId_key\" ON public.\"Character\" USING btree (\"modifiersListId\")",
        "CREATE TABLE \"Analyzer\" (\n    id text NOT NULL,\n    name text,\n    \"monsterId\" text,\n    \"characterId\" text,\n    \"extraDetails\" text,\n    \"updatedAt\" timestamp(3) without time zone NOT NULL,\n    \"updatedByUserId\" text,\n    \"createdAt\" timestamp(3) without time zone NOT NULL,\n    \"createdByUserId\" text,\n    \"statisticsId\" text,\n    CONSTRAINT \"Analyzer_pkey\" PRIMARY KEY (id),\n    CONSTRAINT \"Analyzer_characterId_fkey\" FOREIGN KEY (\"characterId\") REFERENCES \"Character\"(id) ON UPDATE CASCADE ON DELETE CASCADE,\n    CONSTRAINT \"Analyzer_createdByUserId_fkey\" FOREIGN KEY (\"createdByUserId\") REFERENCES \"UserCreateData\"(\"userId\") ON UPDATE CASCADE ON DELETE SET NULL,\n    CONSTRAINT \"Analyzer_monsterId_fkey\" FOREIGN KEY (\"monsterId\") REFERENCES \"Monster\"(id) ON UPDATE CASCADE ON DELETE SET NULL,\n    CONSTRAINT \"Analyzer_updatedByUserId_fkey\" FOREIGN KEY (\"updatedByUserId\") REFERENCES \"UserUpdateData\"(\"userId\") ON UPDATE CASCADE ON DELETE SET NULL\n)",
        "CREATE TABLE \"Process\" (\n    id text NOT NULL,\n    \"analyzerId\" text NOT NULL,\n    CONSTRAINT \"Process_pkey\" PRIMARY KEY (id),\n    CONSTRAINT \"Process_analyzerId_fkey\" FOREIGN KEY (\"analyzerId\") REFERENCES \"Analyzer\"(id) ON UPDATE CASCADE ON DELETE CASCADE\n)",
        "CREATE TABLE \"Step\" (\n    id text NOT NULL,\n    \"order\" integer NOT NULL,\n    \"skillId\" text NOT NULL,\n    \"processId\" text NOT NULL,\n    CONSTRAINT \"Step_pkey\" PRIMARY KEY (id),\n    CONSTRAINT \"Step_processId_fkey\" FOREIGN KEY (\"processId\") REFERENCES \"Process\"(id) ON UPDATE CASCADE ON DELETE CASCADE,\n    CONSTRAINT \"Step_skillId_fkey\" FOREIGN KEY (\"skillId\") REFERENCES \"Skill\"(id) ON UPDATE CASCADE ON DELETE CASCADE\n)",
        "CREATE TABLE \"Statistics\" (\n    id text NOT NULL,\n    \"monsterId\" text,\n    \"crystalId\" text,\n    \"mainWeaponId\" text,\n    \"subWeaponId\" text,\n    \"bodyArmorId\" text,\n    \"additionalEquipmentId\" text,\n    \"specialEquipmentId\" text,\n    \"skillId\" text,\n    \"petId\" text,\n    \"consumableId\" text,\n    \"characterId\" text,\n    \"analyzerId\" text,\n    CONSTRAINT \"Statistics_pkey\" PRIMARY KEY (id),\n    CONSTRAINT \"Statistics_additionalEquipmentId_fkey\" FOREIGN KEY (\"additionalEquipmentId\") REFERENCES \"AdditionalEquipment\"(id) ON UPDATE CASCADE ON DELETE SET NULL,\n    CONSTRAINT \"Statistics_analyzerId_fkey\" FOREIGN KEY (\"analyzerId\") REFERENCES \"Analyzer\"(id) ON UPDATE CASCADE ON DELETE CASCADE,\n    CONSTRAINT \"Statistics_bodyArmorId_fkey\" FOREIGN KEY (\"bodyArmorId\") REFERENCES \"BodyArmor\"(id) ON UPDATE CASCADE ON DELETE SET NULL,\n    CONSTRAINT \"Statistics_characterId_fkey\" FOREIGN KEY (\"characterId\") REFERENCES \"Character\"(id) ON UPDATE CASCADE ON DELETE CASCADE,\n    CONSTRAINT \"Statistics_consumableId_fkey\" FOREIGN KEY (\"consumableId\") REFERENCES \"Consumable\"(id) ON UPDATE CASCADE ON DELETE SET NULL,\n    CONSTRAINT \"Statistics_crystalId_fkey\" FOREIGN KEY (\"crystalId\") REFERENCES \"Crystal\"(id) ON UPDATE CASCADE ON DELETE SET NULL,\n    CONSTRAINT \"Statistics_mainWeaponId_fkey\" FOREIGN KEY (\"mainWeaponId\") REFERENCES \"MainWeapon\"(id) ON UPDATE CASCADE ON DELETE SET NULL,\n    CONSTRAINT \"Statistics_monsterId_fkey\" FOREIGN KEY (\"monsterId\") REFERENCES \"Monster\"(id) ON UPDATE CASCADE ON DELETE CASCADE,\n    CONSTRAINT \"Statistics_petId_fkey\" FOREIGN KEY (\"petId\") REFERENCES \"Pet\"(id) ON UPDATE CASCADE ON DELETE SET NULL,\n    CONSTRAINT \"Statistics_skillId_fkey\" FOREIGN KEY (\"skillId\") REFERENCES \"Skill\"(id) ON UPDATE CASCADE ON DELETE SET NULL,\n    CONSTRAINT \"Statistics_specialEquipmentId_fkey\" FOREIGN KEY (\"specialEquipmentId\") REFERENCES \"SpecialEquipment\"(id) ON UPDATE CASCADE ON DELETE SET NULL,\n    CONSTRAINT \"Statistics_subWeaponId_fkey\" FOREIGN KEY (\"subWeaponId\") REFERENCES \"SubWeapon\"(id) ON UPDATE CASCADE ON DELETE SET NULL\n)",
        "CREATE UNIQUE INDEX \"Statistics_additionalEquipmentId_key\" ON public.\"Statistics\" USING btree (\"additionalEquipmentId\")",
        "CREATE UNIQUE INDEX \"Statistics_analyzerId_key\" ON public.\"Statistics\" USING btree (\"analyzerId\")",
        "CREATE UNIQUE INDEX \"Statistics_bodyArmorId_key\" ON public.\"Statistics\" USING btree (\"bodyArmorId\")",
        "CREATE UNIQUE INDEX \"Statistics_characterId_key\" ON public.\"Statistics\" USING btree (\"characterId\")",
        "CREATE UNIQUE INDEX \"Statistics_consumableId_key\" ON public.\"Statistics\" USING btree (\"consumableId\")",
        "CREATE UNIQUE INDEX \"Statistics_crystalId_key\" ON public.\"Statistics\" USING btree (\"crystalId\")",
        "CREATE UNIQUE INDEX \"Statistics_mainWeaponId_key\" ON public.\"Statistics\" USING btree (\"mainWeaponId\")",
        "CREATE UNIQUE INDEX \"Statistics_monsterId_key\" ON public.\"Statistics\" USING btree (\"monsterId\")",
        "CREATE UNIQUE INDEX \"Statistics_petId_key\" ON public.\"Statistics\" USING btree (\"petId\")",
        "CREATE UNIQUE INDEX \"Statistics_skillId_key\" ON public.\"Statistics\" USING btree (\"skillId\")",
        "CREATE UNIQUE INDEX \"Statistics_specialEquipmentId_key\" ON public.\"Statistics\" USING btree (\"specialEquipmentId\")",
        "CREATE UNIQUE INDEX \"Statistics_subWeaponId_key\" ON public.\"Statistics\" USING btree (\"subWeaponId\")",
        "CREATE TABLE \"UsageTimestamps\" (\n    \"timestamp\" timestamp(3) without time zone NOT NULL,\n    \"statisticsId\" text,\n    CONSTRAINT \"UsageTimestamps_pkey\" PRIMARY KEY (\"timestamp\"),\n    CONSTRAINT \"UsageTimestamps_statisticsId_fkey\" FOREIGN KEY (\"statisticsId\") REFERENCES \"Statistics\"(id) ON UPDATE CASCADE ON DELETE SET NULL\n)",
        "CREATE TABLE \"ViewTimestamps\" (\n    \"timestamp\" timestamp(3) without time zone NOT NULL,\n    \"statisticsId\" text,\n    CONSTRAINT \"ViewTimestamps_pkey\" PRIMARY KEY (\"timestamp\"),\n    CONSTRAINT \"ViewTimestamps_statisticsId_fkey\" FOREIGN KEY (\"statisticsId\") REFERENCES \"Statistics\"(id) ON UPDATE CASCADE ON DELETE SET NULL\n)",
        "CREATE TABLE \"Rate\" (\n    id text NOT NULL,\n    rate integer NOT NULL,\n    \"userId\" text NOT NULL,\n    \"statisticsId\" text,\n    CONSTRAINT \"Rate_pkey\" PRIMARY KEY (id),\n    CONSTRAINT \"Rate_statisticsId_fkey\" FOREIGN KEY (\"statisticsId\") REFERENCES \"Statistics\"(id) ON UPDATE CASCADE ON DELETE SET NULL,\n    CONSTRAINT \"Rate_userId_fkey\" FOREIGN KEY (\"userId\") REFERENCES \"User\"(id) ON UPDATE CASCADE ON DELETE CASCADE\n)",
        "INSERT INTO \"public\".\"_electric_trigger_settings\" (\"namespace\", \"tablename\", \"flag\")\n  VALUES ('public', 'User', 1)\n  ON CONFLICT DO NOTHING;",
        "DROP TRIGGER IF EXISTS update_ensure_public_User_primarykey ON \"public\".\"User\";",
        "CREATE OR REPLACE FUNCTION update_ensure_public_User_primarykey_function()\nRETURNS TRIGGER AS $$\nBEGIN\n  IF OLD.\"id\" IS DISTINCT FROM NEW.\"id\" THEN\n    RAISE EXCEPTION 'Cannot change the value of column id as it belongs to the primary key';\n  END IF;\n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;",
        "CREATE TRIGGER update_ensure_public_User_primarykey\n  BEFORE UPDATE ON \"public\".\"User\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_ensure_public_User_primarykey_function();",
        "DROP TRIGGER IF EXISTS insert_public_User_into_oplog ON \"public\".\"User\";",
        "    CREATE OR REPLACE FUNCTION insert_public_User_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'User';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'User',\n            'INSERT',\n            json_strip_nulls(json_build_object('id', new.\"id\")),\n            jsonb_build_object('email', new.\"email\", 'emailVerified', new.\"emailVerified\", 'id', new.\"id\", 'image', new.\"image\", 'name', new.\"name\", 'userRole', new.\"userRole\"),\n            NULL,\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER insert_public_User_into_oplog\n  AFTER INSERT ON \"public\".\"User\"\n    FOR EACH ROW\n      EXECUTE FUNCTION insert_public_User_into_oplog_function();",
        "DROP TRIGGER IF EXISTS update_public_User_into_oplog ON \"public\".\"User\";",
        "    CREATE OR REPLACE FUNCTION update_public_User_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'User';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'User',\n            'UPDATE',\n            json_strip_nulls(json_build_object('id', new.\"id\")),\n            jsonb_build_object('email', new.\"email\", 'emailVerified', new.\"emailVerified\", 'id', new.\"id\", 'image', new.\"image\", 'name', new.\"name\", 'userRole', new.\"userRole\"),\n            jsonb_build_object('email', old.\"email\", 'emailVerified', old.\"emailVerified\", 'id', old.\"id\", 'image', old.\"image\", 'name', old.\"name\", 'userRole', old.\"userRole\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER update_public_User_into_oplog\n  AFTER UPDATE ON \"public\".\"User\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_public_User_into_oplog_function();",
        "DROP TRIGGER IF EXISTS delete_public_User_into_oplog ON \"public\".\"User\";",
        "    CREATE OR REPLACE FUNCTION delete_public_User_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'User';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'User',\n            'DELETE',\n            json_strip_nulls(json_build_object('id', old.\"id\")),\n            NULL,\n            jsonb_build_object('email', old.\"email\", 'emailVerified', old.\"emailVerified\", 'id', old.\"id\", 'image', old.\"image\", 'name', old.\"name\", 'userRole', old.\"userRole\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER delete_public_User_into_oplog\n  AFTER DELETE ON \"public\".\"User\"\n    FOR EACH ROW\n      EXECUTE FUNCTION delete_public_User_into_oplog_function();",
        "INSERT INTO \"public\".\"_electric_trigger_settings\" (\"namespace\", \"tablename\", \"flag\")\n  VALUES ('public', 'Account', 1)\n  ON CONFLICT DO NOTHING;",
        "DROP TRIGGER IF EXISTS update_ensure_public_Account_primarykey ON \"public\".\"Account\";",
        "CREATE OR REPLACE FUNCTION update_ensure_public_Account_primarykey_function()\nRETURNS TRIGGER AS $$\nBEGIN\n  IF OLD.\"id\" IS DISTINCT FROM NEW.\"id\" THEN\n    RAISE EXCEPTION 'Cannot change the value of column id as it belongs to the primary key';\n  END IF;\n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;",
        "CREATE TRIGGER update_ensure_public_Account_primarykey\n  BEFORE UPDATE ON \"public\".\"Account\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_ensure_public_Account_primarykey_function();",
        "DROP TRIGGER IF EXISTS insert_public_Account_into_oplog ON \"public\".\"Account\";",
        "    CREATE OR REPLACE FUNCTION insert_public_Account_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Account';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'Account',\n            'INSERT',\n            json_strip_nulls(json_build_object('id', new.\"id\")),\n            jsonb_build_object('access_token', new.\"access_token\", 'expires_at', new.\"expires_at\", 'id', new.\"id\", 'id_token', new.\"id_token\", 'provider', new.\"provider\", 'providerAccountId', new.\"providerAccountId\", 'refresh_token', new.\"refresh_token\", 'scope', new.\"scope\", 'session_state', new.\"session_state\", 'token_type', new.\"token_type\", 'type', new.\"type\", 'userId', new.\"userId\"),\n            NULL,\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER insert_public_Account_into_oplog\n  AFTER INSERT ON \"public\".\"Account\"\n    FOR EACH ROW\n      EXECUTE FUNCTION insert_public_Account_into_oplog_function();",
        "DROP TRIGGER IF EXISTS update_public_Account_into_oplog ON \"public\".\"Account\";",
        "    CREATE OR REPLACE FUNCTION update_public_Account_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Account';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'Account',\n            'UPDATE',\n            json_strip_nulls(json_build_object('id', new.\"id\")),\n            jsonb_build_object('access_token', new.\"access_token\", 'expires_at', new.\"expires_at\", 'id', new.\"id\", 'id_token', new.\"id_token\", 'provider', new.\"provider\", 'providerAccountId', new.\"providerAccountId\", 'refresh_token', new.\"refresh_token\", 'scope', new.\"scope\", 'session_state', new.\"session_state\", 'token_type', new.\"token_type\", 'type', new.\"type\", 'userId', new.\"userId\"),\n            jsonb_build_object('access_token', old.\"access_token\", 'expires_at', old.\"expires_at\", 'id', old.\"id\", 'id_token', old.\"id_token\", 'provider', old.\"provider\", 'providerAccountId', old.\"providerAccountId\", 'refresh_token', old.\"refresh_token\", 'scope', old.\"scope\", 'session_state', old.\"session_state\", 'token_type', old.\"token_type\", 'type', old.\"type\", 'userId', old.\"userId\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER update_public_Account_into_oplog\n  AFTER UPDATE ON \"public\".\"Account\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_public_Account_into_oplog_function();",
        "DROP TRIGGER IF EXISTS delete_public_Account_into_oplog ON \"public\".\"Account\";",
        "    CREATE OR REPLACE FUNCTION delete_public_Account_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Account';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'Account',\n            'DELETE',\n            json_strip_nulls(json_build_object('id', old.\"id\")),\n            NULL,\n            jsonb_build_object('access_token', old.\"access_token\", 'expires_at', old.\"expires_at\", 'id', old.\"id\", 'id_token', old.\"id_token\", 'provider', old.\"provider\", 'providerAccountId', old.\"providerAccountId\", 'refresh_token', old.\"refresh_token\", 'scope', old.\"scope\", 'session_state', old.\"session_state\", 'token_type', old.\"token_type\", 'type', old.\"type\", 'userId', old.\"userId\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER delete_public_Account_into_oplog\n  AFTER DELETE ON \"public\".\"Account\"\n    FOR EACH ROW\n      EXECUTE FUNCTION delete_public_Account_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_insert_public_Account_userId_into_oplog ON \"public\".\"Account\";",
        "    CREATE OR REPLACE FUNCTION compensation_insert_public_Account_userId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Account';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'User',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"User\"\n          WHERE \"id\" = NEW.\"userId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_insert_public_Account_userId_into_oplog\n  AFTER INSERT ON \"public\".\"Account\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_insert_public_Account_userId_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_update_public_Account_userId_into_oplog ON \"public\".\"Account\";",
        "    CREATE OR REPLACE FUNCTION compensation_update_public_Account_userId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Account';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'User',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"User\"\n          WHERE \"id\" = NEW.\"userId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_update_public_Account_userId_into_oplog\n  AFTER UPDATE ON \"public\".\"Account\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_update_public_Account_userId_into_oplog_function();",
        "INSERT INTO \"public\".\"_electric_trigger_settings\" (\"namespace\", \"tablename\", \"flag\")\n  VALUES ('public', 'Session', 1)\n  ON CONFLICT DO NOTHING;",
        "DROP TRIGGER IF EXISTS update_ensure_public_Session_primarykey ON \"public\".\"Session\";",
        "CREATE OR REPLACE FUNCTION update_ensure_public_Session_primarykey_function()\nRETURNS TRIGGER AS $$\nBEGIN\n  IF OLD.\"id\" IS DISTINCT FROM NEW.\"id\" THEN\n    RAISE EXCEPTION 'Cannot change the value of column id as it belongs to the primary key';\n  END IF;\n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;",
        "CREATE TRIGGER update_ensure_public_Session_primarykey\n  BEFORE UPDATE ON \"public\".\"Session\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_ensure_public_Session_primarykey_function();",
        "DROP TRIGGER IF EXISTS insert_public_Session_into_oplog ON \"public\".\"Session\";",
        "    CREATE OR REPLACE FUNCTION insert_public_Session_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Session';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'Session',\n            'INSERT',\n            json_strip_nulls(json_build_object('id', new.\"id\")),\n            jsonb_build_object('expires', new.\"expires\", 'id', new.\"id\", 'sessionToken', new.\"sessionToken\", 'userId', new.\"userId\"),\n            NULL,\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER insert_public_Session_into_oplog\n  AFTER INSERT ON \"public\".\"Session\"\n    FOR EACH ROW\n      EXECUTE FUNCTION insert_public_Session_into_oplog_function();",
        "DROP TRIGGER IF EXISTS update_public_Session_into_oplog ON \"public\".\"Session\";",
        "    CREATE OR REPLACE FUNCTION update_public_Session_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Session';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'Session',\n            'UPDATE',\n            json_strip_nulls(json_build_object('id', new.\"id\")),\n            jsonb_build_object('expires', new.\"expires\", 'id', new.\"id\", 'sessionToken', new.\"sessionToken\", 'userId', new.\"userId\"),\n            jsonb_build_object('expires', old.\"expires\", 'id', old.\"id\", 'sessionToken', old.\"sessionToken\", 'userId', old.\"userId\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER update_public_Session_into_oplog\n  AFTER UPDATE ON \"public\".\"Session\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_public_Session_into_oplog_function();",
        "DROP TRIGGER IF EXISTS delete_public_Session_into_oplog ON \"public\".\"Session\";",
        "    CREATE OR REPLACE FUNCTION delete_public_Session_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Session';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'Session',\n            'DELETE',\n            json_strip_nulls(json_build_object('id', old.\"id\")),\n            NULL,\n            jsonb_build_object('expires', old.\"expires\", 'id', old.\"id\", 'sessionToken', old.\"sessionToken\", 'userId', old.\"userId\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER delete_public_Session_into_oplog\n  AFTER DELETE ON \"public\".\"Session\"\n    FOR EACH ROW\n      EXECUTE FUNCTION delete_public_Session_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_insert_public_Session_userId_into_oplog ON \"public\".\"Session\";",
        "    CREATE OR REPLACE FUNCTION compensation_insert_public_Session_userId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Session';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'User',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"User\"\n          WHERE \"id\" = NEW.\"userId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_insert_public_Session_userId_into_oplog\n  AFTER INSERT ON \"public\".\"Session\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_insert_public_Session_userId_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_update_public_Session_userId_into_oplog ON \"public\".\"Session\";",
        "    CREATE OR REPLACE FUNCTION compensation_update_public_Session_userId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Session';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'User',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"User\"\n          WHERE \"id\" = NEW.\"userId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_update_public_Session_userId_into_oplog\n  AFTER UPDATE ON \"public\".\"Session\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_update_public_Session_userId_into_oplog_function();",
        "INSERT INTO \"public\".\"_electric_trigger_settings\" (\"namespace\", \"tablename\", \"flag\")\n  VALUES ('public', 'Post', 1)\n  ON CONFLICT DO NOTHING;",
        "DROP TRIGGER IF EXISTS update_ensure_public_Post_primarykey ON \"public\".\"Post\";",
        "CREATE OR REPLACE FUNCTION update_ensure_public_Post_primarykey_function()\nRETURNS TRIGGER AS $$\nBEGIN\n  IF OLD.\"id\" IS DISTINCT FROM NEW.\"id\" THEN\n    RAISE EXCEPTION 'Cannot change the value of column id as it belongs to the primary key';\n  END IF;\n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;",
        "CREATE TRIGGER update_ensure_public_Post_primarykey\n  BEFORE UPDATE ON \"public\".\"Post\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_ensure_public_Post_primarykey_function();",
        "DROP TRIGGER IF EXISTS insert_public_Post_into_oplog ON \"public\".\"Post\";",
        "    CREATE OR REPLACE FUNCTION insert_public_Post_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Post';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'Post',\n            'INSERT',\n            json_strip_nulls(json_build_object('id', new.\"id\")),\n            jsonb_build_object('createdAt', new.\"createdAt\", 'createdById', new.\"createdById\", 'id', new.\"id\", 'name', new.\"name\", 'updatedAt', new.\"updatedAt\"),\n            NULL,\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER insert_public_Post_into_oplog\n  AFTER INSERT ON \"public\".\"Post\"\n    FOR EACH ROW\n      EXECUTE FUNCTION insert_public_Post_into_oplog_function();",
        "DROP TRIGGER IF EXISTS update_public_Post_into_oplog ON \"public\".\"Post\";",
        "    CREATE OR REPLACE FUNCTION update_public_Post_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Post';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'Post',\n            'UPDATE',\n            json_strip_nulls(json_build_object('id', new.\"id\")),\n            jsonb_build_object('createdAt', new.\"createdAt\", 'createdById', new.\"createdById\", 'id', new.\"id\", 'name', new.\"name\", 'updatedAt', new.\"updatedAt\"),\n            jsonb_build_object('createdAt', old.\"createdAt\", 'createdById', old.\"createdById\", 'id', old.\"id\", 'name', old.\"name\", 'updatedAt', old.\"updatedAt\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER update_public_Post_into_oplog\n  AFTER UPDATE ON \"public\".\"Post\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_public_Post_into_oplog_function();",
        "DROP TRIGGER IF EXISTS delete_public_Post_into_oplog ON \"public\".\"Post\";",
        "    CREATE OR REPLACE FUNCTION delete_public_Post_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Post';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'Post',\n            'DELETE',\n            json_strip_nulls(json_build_object('id', old.\"id\")),\n            NULL,\n            jsonb_build_object('createdAt', old.\"createdAt\", 'createdById', old.\"createdById\", 'id', old.\"id\", 'name', old.\"name\", 'updatedAt', old.\"updatedAt\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER delete_public_Post_into_oplog\n  AFTER DELETE ON \"public\".\"Post\"\n    FOR EACH ROW\n      EXECUTE FUNCTION delete_public_Post_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_insert_public_Post_createdById_into_oplog ON \"public\".\"Post\";",
        "    CREATE OR REPLACE FUNCTION compensation_insert_public_Post_createdById_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Post';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'User',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"User\"\n          WHERE \"id\" = NEW.\"createdById\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_insert_public_Post_createdById_into_oplog\n  AFTER INSERT ON \"public\".\"Post\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_insert_public_Post_createdById_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_update_public_Post_createdById_into_oplog ON \"public\".\"Post\";",
        "    CREATE OR REPLACE FUNCTION compensation_update_public_Post_createdById_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Post';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'User',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"User\"\n          WHERE \"id\" = NEW.\"createdById\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_update_public_Post_createdById_into_oplog\n  AFTER UPDATE ON \"public\".\"Post\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_update_public_Post_createdById_into_oplog_function();",
        "INSERT INTO \"public\".\"_electric_trigger_settings\" (\"namespace\", \"tablename\", \"flag\")\n  VALUES ('public', 'UserCreateData', 1)\n  ON CONFLICT DO NOTHING;",
        "DROP TRIGGER IF EXISTS update_ensure_public_UserCreateData_primarykey ON \"public\".\"UserCreateData\";",
        "CREATE OR REPLACE FUNCTION update_ensure_public_UserCreateData_primarykey_function()\nRETURNS TRIGGER AS $$\nBEGIN\n  IF OLD.\"userId\" IS DISTINCT FROM NEW.\"userId\" THEN\n    RAISE EXCEPTION 'Cannot change the value of column userId as it belongs to the primary key';\n  END IF;\n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;",
        "CREATE TRIGGER update_ensure_public_UserCreateData_primarykey\n  BEFORE UPDATE ON \"public\".\"UserCreateData\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_ensure_public_UserCreateData_primarykey_function();",
        "DROP TRIGGER IF EXISTS insert_public_UserCreateData_into_oplog ON \"public\".\"UserCreateData\";",
        "    CREATE OR REPLACE FUNCTION insert_public_UserCreateData_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'UserCreateData';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'UserCreateData',\n            'INSERT',\n            json_strip_nulls(json_build_object('userId', new.\"userId\")),\n            jsonb_build_object('userId', new.\"userId\"),\n            NULL,\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER insert_public_UserCreateData_into_oplog\n  AFTER INSERT ON \"public\".\"UserCreateData\"\n    FOR EACH ROW\n      EXECUTE FUNCTION insert_public_UserCreateData_into_oplog_function();",
        "DROP TRIGGER IF EXISTS update_public_UserCreateData_into_oplog ON \"public\".\"UserCreateData\";",
        "    CREATE OR REPLACE FUNCTION update_public_UserCreateData_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'UserCreateData';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'UserCreateData',\n            'UPDATE',\n            json_strip_nulls(json_build_object('userId', new.\"userId\")),\n            jsonb_build_object('userId', new.\"userId\"),\n            jsonb_build_object('userId', old.\"userId\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER update_public_UserCreateData_into_oplog\n  AFTER UPDATE ON \"public\".\"UserCreateData\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_public_UserCreateData_into_oplog_function();",
        "DROP TRIGGER IF EXISTS delete_public_UserCreateData_into_oplog ON \"public\".\"UserCreateData\";",
        "    CREATE OR REPLACE FUNCTION delete_public_UserCreateData_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'UserCreateData';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'UserCreateData',\n            'DELETE',\n            json_strip_nulls(json_build_object('userId', old.\"userId\")),\n            NULL,\n            jsonb_build_object('userId', old.\"userId\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER delete_public_UserCreateData_into_oplog\n  AFTER DELETE ON \"public\".\"UserCreateData\"\n    FOR EACH ROW\n      EXECUTE FUNCTION delete_public_UserCreateData_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_insert_public_UserCreateData_userId_into_oplog ON \"public\".\"UserCreateData\";",
        "    CREATE OR REPLACE FUNCTION compensation_insert_public_UserCreateData_userId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'UserCreateData';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'User',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"User\"\n          WHERE \"id\" = NEW.\"userId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_insert_public_UserCreateData_userId_into_oplog\n  AFTER INSERT ON \"public\".\"UserCreateData\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_insert_public_UserCreateData_userId_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_update_public_UserCreateData_userId_into_oplog ON \"public\".\"UserCreateData\";",
        "    CREATE OR REPLACE FUNCTION compensation_update_public_UserCreateData_userId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'UserCreateData';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'User',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"User\"\n          WHERE \"id\" = NEW.\"userId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_update_public_UserCreateData_userId_into_oplog\n  AFTER UPDATE ON \"public\".\"UserCreateData\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_update_public_UserCreateData_userId_into_oplog_function();",
        "INSERT INTO \"public\".\"_electric_trigger_settings\" (\"namespace\", \"tablename\", \"flag\")\n  VALUES ('public', 'UserUpdateData', 1)\n  ON CONFLICT DO NOTHING;",
        "DROP TRIGGER IF EXISTS update_ensure_public_UserUpdateData_primarykey ON \"public\".\"UserUpdateData\";",
        "CREATE OR REPLACE FUNCTION update_ensure_public_UserUpdateData_primarykey_function()\nRETURNS TRIGGER AS $$\nBEGIN\n  IF OLD.\"userId\" IS DISTINCT FROM NEW.\"userId\" THEN\n    RAISE EXCEPTION 'Cannot change the value of column userId as it belongs to the primary key';\n  END IF;\n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;",
        "CREATE TRIGGER update_ensure_public_UserUpdateData_primarykey\n  BEFORE UPDATE ON \"public\".\"UserUpdateData\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_ensure_public_UserUpdateData_primarykey_function();",
        "DROP TRIGGER IF EXISTS insert_public_UserUpdateData_into_oplog ON \"public\".\"UserUpdateData\";",
        "    CREATE OR REPLACE FUNCTION insert_public_UserUpdateData_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'UserUpdateData';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'UserUpdateData',\n            'INSERT',\n            json_strip_nulls(json_build_object('userId', new.\"userId\")),\n            jsonb_build_object('userId', new.\"userId\"),\n            NULL,\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER insert_public_UserUpdateData_into_oplog\n  AFTER INSERT ON \"public\".\"UserUpdateData\"\n    FOR EACH ROW\n      EXECUTE FUNCTION insert_public_UserUpdateData_into_oplog_function();",
        "DROP TRIGGER IF EXISTS update_public_UserUpdateData_into_oplog ON \"public\".\"UserUpdateData\";",
        "    CREATE OR REPLACE FUNCTION update_public_UserUpdateData_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'UserUpdateData';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'UserUpdateData',\n            'UPDATE',\n            json_strip_nulls(json_build_object('userId', new.\"userId\")),\n            jsonb_build_object('userId', new.\"userId\"),\n            jsonb_build_object('userId', old.\"userId\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER update_public_UserUpdateData_into_oplog\n  AFTER UPDATE ON \"public\".\"UserUpdateData\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_public_UserUpdateData_into_oplog_function();",
        "DROP TRIGGER IF EXISTS delete_public_UserUpdateData_into_oplog ON \"public\".\"UserUpdateData\";",
        "    CREATE OR REPLACE FUNCTION delete_public_UserUpdateData_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'UserUpdateData';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'UserUpdateData',\n            'DELETE',\n            json_strip_nulls(json_build_object('userId', old.\"userId\")),\n            NULL,\n            jsonb_build_object('userId', old.\"userId\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER delete_public_UserUpdateData_into_oplog\n  AFTER DELETE ON \"public\".\"UserUpdateData\"\n    FOR EACH ROW\n      EXECUTE FUNCTION delete_public_UserUpdateData_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_insert_public_UserUpdateData_userId_into_oplog ON \"public\".\"UserUpdateData\";",
        "    CREATE OR REPLACE FUNCTION compensation_insert_public_UserUpdateData_userId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'UserUpdateData';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'User',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"User\"\n          WHERE \"id\" = NEW.\"userId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_insert_public_UserUpdateData_userId_into_oplog\n  AFTER INSERT ON \"public\".\"UserUpdateData\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_insert_public_UserUpdateData_userId_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_update_public_UserUpdateData_userId_into_oplog ON \"public\".\"UserUpdateData\";",
        "    CREATE OR REPLACE FUNCTION compensation_update_public_UserUpdateData_userId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'UserUpdateData';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'User',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"User\"\n          WHERE \"id\" = NEW.\"userId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_update_public_UserUpdateData_userId_into_oplog\n  AFTER UPDATE ON \"public\".\"UserUpdateData\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_update_public_UserUpdateData_userId_into_oplog_function();",
        "INSERT INTO \"public\".\"_electric_trigger_settings\" (\"namespace\", \"tablename\", \"flag\")\n  VALUES ('public', 'Rate', 1)\n  ON CONFLICT DO NOTHING;",
        "DROP TRIGGER IF EXISTS update_ensure_public_Rate_primarykey ON \"public\".\"Rate\";",
        "CREATE OR REPLACE FUNCTION update_ensure_public_Rate_primarykey_function()\nRETURNS TRIGGER AS $$\nBEGIN\n  IF OLD.\"id\" IS DISTINCT FROM NEW.\"id\" THEN\n    RAISE EXCEPTION 'Cannot change the value of column id as it belongs to the primary key';\n  END IF;\n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;",
        "CREATE TRIGGER update_ensure_public_Rate_primarykey\n  BEFORE UPDATE ON \"public\".\"Rate\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_ensure_public_Rate_primarykey_function();",
        "DROP TRIGGER IF EXISTS insert_public_Rate_into_oplog ON \"public\".\"Rate\";",
        "    CREATE OR REPLACE FUNCTION insert_public_Rate_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Rate';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'Rate',\n            'INSERT',\n            json_strip_nulls(json_build_object('id', new.\"id\")),\n            jsonb_build_object('id', new.\"id\", 'rate', new.\"rate\", 'statisticsId', new.\"statisticsId\", 'userId', new.\"userId\"),\n            NULL,\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER insert_public_Rate_into_oplog\n  AFTER INSERT ON \"public\".\"Rate\"\n    FOR EACH ROW\n      EXECUTE FUNCTION insert_public_Rate_into_oplog_function();",
        "DROP TRIGGER IF EXISTS update_public_Rate_into_oplog ON \"public\".\"Rate\";",
        "    CREATE OR REPLACE FUNCTION update_public_Rate_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Rate';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'Rate',\n            'UPDATE',\n            json_strip_nulls(json_build_object('id', new.\"id\")),\n            jsonb_build_object('id', new.\"id\", 'rate', new.\"rate\", 'statisticsId', new.\"statisticsId\", 'userId', new.\"userId\"),\n            jsonb_build_object('id', old.\"id\", 'rate', old.\"rate\", 'statisticsId', old.\"statisticsId\", 'userId', old.\"userId\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER update_public_Rate_into_oplog\n  AFTER UPDATE ON \"public\".\"Rate\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_public_Rate_into_oplog_function();",
        "DROP TRIGGER IF EXISTS delete_public_Rate_into_oplog ON \"public\".\"Rate\";",
        "    CREATE OR REPLACE FUNCTION delete_public_Rate_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Rate';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'Rate',\n            'DELETE',\n            json_strip_nulls(json_build_object('id', old.\"id\")),\n            NULL,\n            jsonb_build_object('id', old.\"id\", 'rate', old.\"rate\", 'statisticsId', old.\"statisticsId\", 'userId', old.\"userId\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER delete_public_Rate_into_oplog\n  AFTER DELETE ON \"public\".\"Rate\"\n    FOR EACH ROW\n      EXECUTE FUNCTION delete_public_Rate_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_insert_public_Rate_statisticsId_into_oplog ON \"public\".\"Rate\";",
        "    CREATE OR REPLACE FUNCTION compensation_insert_public_Rate_statisticsId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Rate';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'Statistics',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"Statistics\"\n          WHERE \"id\" = NEW.\"statisticsId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_insert_public_Rate_statisticsId_into_oplog\n  AFTER INSERT ON \"public\".\"Rate\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_insert_public_Rate_statisticsId_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_update_public_Rate_statisticsId_into_oplog ON \"public\".\"Rate\";",
        "    CREATE OR REPLACE FUNCTION compensation_update_public_Rate_statisticsId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Rate';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'Statistics',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"Statistics\"\n          WHERE \"id\" = NEW.\"statisticsId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_update_public_Rate_statisticsId_into_oplog\n  AFTER UPDATE ON \"public\".\"Rate\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_update_public_Rate_statisticsId_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_insert_public_Rate_userId_into_oplog ON \"public\".\"Rate\";",
        "    CREATE OR REPLACE FUNCTION compensation_insert_public_Rate_userId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Rate';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'User',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"User\"\n          WHERE \"id\" = NEW.\"userId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_insert_public_Rate_userId_into_oplog\n  AFTER INSERT ON \"public\".\"Rate\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_insert_public_Rate_userId_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_update_public_Rate_userId_into_oplog ON \"public\".\"Rate\";",
        "    CREATE OR REPLACE FUNCTION compensation_update_public_Rate_userId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Rate';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'User',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"User\"\n          WHERE \"id\" = NEW.\"userId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_update_public_Rate_userId_into_oplog\n  AFTER UPDATE ON \"public\".\"Rate\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_update_public_Rate_userId_into_oplog_function();",
        "INSERT INTO \"public\".\"_electric_trigger_settings\" (\"namespace\", \"tablename\", \"flag\")\n  VALUES ('public', 'UsageTimestamps', 1)\n  ON CONFLICT DO NOTHING;",
        "DROP TRIGGER IF EXISTS update_ensure_public_UsageTimestamps_primarykey ON \"public\".\"UsageTimestamps\";",
        "CREATE OR REPLACE FUNCTION update_ensure_public_UsageTimestamps_primarykey_function()\nRETURNS TRIGGER AS $$\nBEGIN\n  IF OLD.\"timestamp\" IS DISTINCT FROM NEW.\"timestamp\" THEN\n    RAISE EXCEPTION 'Cannot change the value of column timestamp as it belongs to the primary key';\n  END IF;\n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;",
        "CREATE TRIGGER update_ensure_public_UsageTimestamps_primarykey\n  BEFORE UPDATE ON \"public\".\"UsageTimestamps\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_ensure_public_UsageTimestamps_primarykey_function();",
        "DROP TRIGGER IF EXISTS insert_public_UsageTimestamps_into_oplog ON \"public\".\"UsageTimestamps\";",
        "    CREATE OR REPLACE FUNCTION insert_public_UsageTimestamps_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'UsageTimestamps';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'UsageTimestamps',\n            'INSERT',\n            json_strip_nulls(json_build_object('timestamp', new.\"timestamp\")),\n            jsonb_build_object('statisticsId', new.\"statisticsId\", 'timestamp', new.\"timestamp\"),\n            NULL,\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER insert_public_UsageTimestamps_into_oplog\n  AFTER INSERT ON \"public\".\"UsageTimestamps\"\n    FOR EACH ROW\n      EXECUTE FUNCTION insert_public_UsageTimestamps_into_oplog_function();",
        "DROP TRIGGER IF EXISTS update_public_UsageTimestamps_into_oplog ON \"public\".\"UsageTimestamps\";",
        "    CREATE OR REPLACE FUNCTION update_public_UsageTimestamps_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'UsageTimestamps';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'UsageTimestamps',\n            'UPDATE',\n            json_strip_nulls(json_build_object('timestamp', new.\"timestamp\")),\n            jsonb_build_object('statisticsId', new.\"statisticsId\", 'timestamp', new.\"timestamp\"),\n            jsonb_build_object('statisticsId', old.\"statisticsId\", 'timestamp', old.\"timestamp\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER update_public_UsageTimestamps_into_oplog\n  AFTER UPDATE ON \"public\".\"UsageTimestamps\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_public_UsageTimestamps_into_oplog_function();",
        "DROP TRIGGER IF EXISTS delete_public_UsageTimestamps_into_oplog ON \"public\".\"UsageTimestamps\";",
        "    CREATE OR REPLACE FUNCTION delete_public_UsageTimestamps_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'UsageTimestamps';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'UsageTimestamps',\n            'DELETE',\n            json_strip_nulls(json_build_object('timestamp', old.\"timestamp\")),\n            NULL,\n            jsonb_build_object('statisticsId', old.\"statisticsId\", 'timestamp', old.\"timestamp\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER delete_public_UsageTimestamps_into_oplog\n  AFTER DELETE ON \"public\".\"UsageTimestamps\"\n    FOR EACH ROW\n      EXECUTE FUNCTION delete_public_UsageTimestamps_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_insert_public_UsageTimestamps_statisticsId_into_oplog ON \"public\".\"UsageTimestamps\";",
        "    CREATE OR REPLACE FUNCTION compensation_insert_public_UsageTimestamps_statisticsId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'UsageTimestamps';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'Statistics',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"Statistics\"\n          WHERE \"id\" = NEW.\"statisticsId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_insert_public_UsageTimestamps_statisticsId_into_oplog\n  AFTER INSERT ON \"public\".\"UsageTimestamps\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_insert_public_UsageTimestamps_statisticsId_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_update_public_UsageTimestamps_statisticsId_into_oplog ON \"public\".\"UsageTimestamps\";",
        "    CREATE OR REPLACE FUNCTION compensation_update_public_UsageTimestamps_statisticsId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'UsageTimestamps';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'Statistics',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"Statistics\"\n          WHERE \"id\" = NEW.\"statisticsId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_update_public_UsageTimestamps_statisticsId_into_oplog\n  AFTER UPDATE ON \"public\".\"UsageTimestamps\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_update_public_UsageTimestamps_statisticsId_into_oplog_function();",
        "INSERT INTO \"public\".\"_electric_trigger_settings\" (\"namespace\", \"tablename\", \"flag\")\n  VALUES ('public', 'ViewTimestamps', 1)\n  ON CONFLICT DO NOTHING;",
        "DROP TRIGGER IF EXISTS update_ensure_public_ViewTimestamps_primarykey ON \"public\".\"ViewTimestamps\";",
        "CREATE OR REPLACE FUNCTION update_ensure_public_ViewTimestamps_primarykey_function()\nRETURNS TRIGGER AS $$\nBEGIN\n  IF OLD.\"timestamp\" IS DISTINCT FROM NEW.\"timestamp\" THEN\n    RAISE EXCEPTION 'Cannot change the value of column timestamp as it belongs to the primary key';\n  END IF;\n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;",
        "CREATE TRIGGER update_ensure_public_ViewTimestamps_primarykey\n  BEFORE UPDATE ON \"public\".\"ViewTimestamps\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_ensure_public_ViewTimestamps_primarykey_function();",
        "DROP TRIGGER IF EXISTS insert_public_ViewTimestamps_into_oplog ON \"public\".\"ViewTimestamps\";",
        "    CREATE OR REPLACE FUNCTION insert_public_ViewTimestamps_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'ViewTimestamps';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'ViewTimestamps',\n            'INSERT',\n            json_strip_nulls(json_build_object('timestamp', new.\"timestamp\")),\n            jsonb_build_object('statisticsId', new.\"statisticsId\", 'timestamp', new.\"timestamp\"),\n            NULL,\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER insert_public_ViewTimestamps_into_oplog\n  AFTER INSERT ON \"public\".\"ViewTimestamps\"\n    FOR EACH ROW\n      EXECUTE FUNCTION insert_public_ViewTimestamps_into_oplog_function();",
        "DROP TRIGGER IF EXISTS update_public_ViewTimestamps_into_oplog ON \"public\".\"ViewTimestamps\";",
        "    CREATE OR REPLACE FUNCTION update_public_ViewTimestamps_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'ViewTimestamps';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'ViewTimestamps',\n            'UPDATE',\n            json_strip_nulls(json_build_object('timestamp', new.\"timestamp\")),\n            jsonb_build_object('statisticsId', new.\"statisticsId\", 'timestamp', new.\"timestamp\"),\n            jsonb_build_object('statisticsId', old.\"statisticsId\", 'timestamp', old.\"timestamp\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER update_public_ViewTimestamps_into_oplog\n  AFTER UPDATE ON \"public\".\"ViewTimestamps\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_public_ViewTimestamps_into_oplog_function();",
        "DROP TRIGGER IF EXISTS delete_public_ViewTimestamps_into_oplog ON \"public\".\"ViewTimestamps\";",
        "    CREATE OR REPLACE FUNCTION delete_public_ViewTimestamps_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'ViewTimestamps';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'ViewTimestamps',\n            'DELETE',\n            json_strip_nulls(json_build_object('timestamp', old.\"timestamp\")),\n            NULL,\n            jsonb_build_object('statisticsId', old.\"statisticsId\", 'timestamp', old.\"timestamp\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER delete_public_ViewTimestamps_into_oplog\n  AFTER DELETE ON \"public\".\"ViewTimestamps\"\n    FOR EACH ROW\n      EXECUTE FUNCTION delete_public_ViewTimestamps_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_insert_public_ViewTimestamps_statisticsId_into_oplog ON \"public\".\"ViewTimestamps\";",
        "    CREATE OR REPLACE FUNCTION compensation_insert_public_ViewTimestamps_statisticsId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'ViewTimestamps';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'Statistics',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"Statistics\"\n          WHERE \"id\" = NEW.\"statisticsId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_insert_public_ViewTimestamps_statisticsId_into_oplog\n  AFTER INSERT ON \"public\".\"ViewTimestamps\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_insert_public_ViewTimestamps_statisticsId_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_update_public_ViewTimestamps_statisticsId_into_oplog ON \"public\".\"ViewTimestamps\";",
        "    CREATE OR REPLACE FUNCTION compensation_update_public_ViewTimestamps_statisticsId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'ViewTimestamps';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'Statistics',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"Statistics\"\n          WHERE \"id\" = NEW.\"statisticsId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_update_public_ViewTimestamps_statisticsId_into_oplog\n  AFTER UPDATE ON \"public\".\"ViewTimestamps\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_update_public_ViewTimestamps_statisticsId_into_oplog_function();",
        "INSERT INTO \"public\".\"_electric_trigger_settings\" (\"namespace\", \"tablename\", \"flag\")\n  VALUES ('public', 'Statistics', 1)\n  ON CONFLICT DO NOTHING;",
        "DROP TRIGGER IF EXISTS update_ensure_public_Statistics_primarykey ON \"public\".\"Statistics\";",
        "CREATE OR REPLACE FUNCTION update_ensure_public_Statistics_primarykey_function()\nRETURNS TRIGGER AS $$\nBEGIN\n  IF OLD.\"id\" IS DISTINCT FROM NEW.\"id\" THEN\n    RAISE EXCEPTION 'Cannot change the value of column id as it belongs to the primary key';\n  END IF;\n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;",
        "CREATE TRIGGER update_ensure_public_Statistics_primarykey\n  BEFORE UPDATE ON \"public\".\"Statistics\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_ensure_public_Statistics_primarykey_function();",
        "DROP TRIGGER IF EXISTS insert_public_Statistics_into_oplog ON \"public\".\"Statistics\";",
        "    CREATE OR REPLACE FUNCTION insert_public_Statistics_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Statistics';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'Statistics',\n            'INSERT',\n            json_strip_nulls(json_build_object('id', new.\"id\")),\n            jsonb_build_object('additionalEquipmentId', new.\"additionalEquipmentId\", 'analyzerId', new.\"analyzerId\", 'bodyArmorId', new.\"bodyArmorId\", 'characterId', new.\"characterId\", 'consumableId', new.\"consumableId\", 'crystalId', new.\"crystalId\", 'id', new.\"id\", 'mainWeaponId', new.\"mainWeaponId\", 'monsterId', new.\"monsterId\", 'petId', new.\"petId\", 'skillId', new.\"skillId\", 'specialEquipmentId', new.\"specialEquipmentId\", 'subWeaponId', new.\"subWeaponId\"),\n            NULL,\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER insert_public_Statistics_into_oplog\n  AFTER INSERT ON \"public\".\"Statistics\"\n    FOR EACH ROW\n      EXECUTE FUNCTION insert_public_Statistics_into_oplog_function();",
        "DROP TRIGGER IF EXISTS update_public_Statistics_into_oplog ON \"public\".\"Statistics\";",
        "    CREATE OR REPLACE FUNCTION update_public_Statistics_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Statistics';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'Statistics',\n            'UPDATE',\n            json_strip_nulls(json_build_object('id', new.\"id\")),\n            jsonb_build_object('additionalEquipmentId', new.\"additionalEquipmentId\", 'analyzerId', new.\"analyzerId\", 'bodyArmorId', new.\"bodyArmorId\", 'characterId', new.\"characterId\", 'consumableId', new.\"consumableId\", 'crystalId', new.\"crystalId\", 'id', new.\"id\", 'mainWeaponId', new.\"mainWeaponId\", 'monsterId', new.\"monsterId\", 'petId', new.\"petId\", 'skillId', new.\"skillId\", 'specialEquipmentId', new.\"specialEquipmentId\", 'subWeaponId', new.\"subWeaponId\"),\n            jsonb_build_object('additionalEquipmentId', old.\"additionalEquipmentId\", 'analyzerId', old.\"analyzerId\", 'bodyArmorId', old.\"bodyArmorId\", 'characterId', old.\"characterId\", 'consumableId', old.\"consumableId\", 'crystalId', old.\"crystalId\", 'id', old.\"id\", 'mainWeaponId', old.\"mainWeaponId\", 'monsterId', old.\"monsterId\", 'petId', old.\"petId\", 'skillId', old.\"skillId\", 'specialEquipmentId', old.\"specialEquipmentId\", 'subWeaponId', old.\"subWeaponId\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER update_public_Statistics_into_oplog\n  AFTER UPDATE ON \"public\".\"Statistics\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_public_Statistics_into_oplog_function();",
        "DROP TRIGGER IF EXISTS delete_public_Statistics_into_oplog ON \"public\".\"Statistics\";",
        "    CREATE OR REPLACE FUNCTION delete_public_Statistics_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Statistics';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'Statistics',\n            'DELETE',\n            json_strip_nulls(json_build_object('id', old.\"id\")),\n            NULL,\n            jsonb_build_object('additionalEquipmentId', old.\"additionalEquipmentId\", 'analyzerId', old.\"analyzerId\", 'bodyArmorId', old.\"bodyArmorId\", 'characterId', old.\"characterId\", 'consumableId', old.\"consumableId\", 'crystalId', old.\"crystalId\", 'id', old.\"id\", 'mainWeaponId', old.\"mainWeaponId\", 'monsterId', old.\"monsterId\", 'petId', old.\"petId\", 'skillId', old.\"skillId\", 'specialEquipmentId', old.\"specialEquipmentId\", 'subWeaponId', old.\"subWeaponId\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER delete_public_Statistics_into_oplog\n  AFTER DELETE ON \"public\".\"Statistics\"\n    FOR EACH ROW\n      EXECUTE FUNCTION delete_public_Statistics_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_insert_public_Statistics_additionalEquipmentId_into_oplog ON \"public\".\"Statistics\";",
        "    CREATE OR REPLACE FUNCTION compensation_insert_public_Statistics_additionalEquipmentId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Statistics';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'AdditionalEquipment',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"AdditionalEquipment\"\n          WHERE \"id\" = NEW.\"additionalEquipmentId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_insert_public_Statistics_additionalEquipmentId_into_oplog\n  AFTER INSERT ON \"public\".\"Statistics\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_insert_public_Statistics_additionalEquipmentId_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_update_public_Statistics_additionalEquipmentId_into_oplog ON \"public\".\"Statistics\";",
        "    CREATE OR REPLACE FUNCTION compensation_update_public_Statistics_additionalEquipmentId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Statistics';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'AdditionalEquipment',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"AdditionalEquipment\"\n          WHERE \"id\" = NEW.\"additionalEquipmentId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_update_public_Statistics_additionalEquipmentId_into_oplog\n  AFTER UPDATE ON \"public\".\"Statistics\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_update_public_Statistics_additionalEquipmentId_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_insert_public_Statistics_analyzerId_into_oplog ON \"public\".\"Statistics\";",
        "    CREATE OR REPLACE FUNCTION compensation_insert_public_Statistics_analyzerId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Statistics';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'Analyzer',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"Analyzer\"\n          WHERE \"id\" = NEW.\"analyzerId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_insert_public_Statistics_analyzerId_into_oplog\n  AFTER INSERT ON \"public\".\"Statistics\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_insert_public_Statistics_analyzerId_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_update_public_Statistics_analyzerId_into_oplog ON \"public\".\"Statistics\";",
        "    CREATE OR REPLACE FUNCTION compensation_update_public_Statistics_analyzerId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Statistics';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'Analyzer',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"Analyzer\"\n          WHERE \"id\" = NEW.\"analyzerId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_update_public_Statistics_analyzerId_into_oplog\n  AFTER UPDATE ON \"public\".\"Statistics\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_update_public_Statistics_analyzerId_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_insert_public_Statistics_bodyArmorId_into_oplog ON \"public\".\"Statistics\";",
        "    CREATE OR REPLACE FUNCTION compensation_insert_public_Statistics_bodyArmorId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Statistics';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'BodyArmor',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"BodyArmor\"\n          WHERE \"id\" = NEW.\"bodyArmorId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_insert_public_Statistics_bodyArmorId_into_oplog\n  AFTER INSERT ON \"public\".\"Statistics\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_insert_public_Statistics_bodyArmorId_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_update_public_Statistics_bodyArmorId_into_oplog ON \"public\".\"Statistics\";",
        "    CREATE OR REPLACE FUNCTION compensation_update_public_Statistics_bodyArmorId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Statistics';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'BodyArmor',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"BodyArmor\"\n          WHERE \"id\" = NEW.\"bodyArmorId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_update_public_Statistics_bodyArmorId_into_oplog\n  AFTER UPDATE ON \"public\".\"Statistics\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_update_public_Statistics_bodyArmorId_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_insert_public_Statistics_characterId_into_oplog ON \"public\".\"Statistics\";",
        "    CREATE OR REPLACE FUNCTION compensation_insert_public_Statistics_characterId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Statistics';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'Character',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"Character\"\n          WHERE \"id\" = NEW.\"characterId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_insert_public_Statistics_characterId_into_oplog\n  AFTER INSERT ON \"public\".\"Statistics\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_insert_public_Statistics_characterId_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_update_public_Statistics_characterId_into_oplog ON \"public\".\"Statistics\";",
        "    CREATE OR REPLACE FUNCTION compensation_update_public_Statistics_characterId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Statistics';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'Character',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"Character\"\n          WHERE \"id\" = NEW.\"characterId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_update_public_Statistics_characterId_into_oplog\n  AFTER UPDATE ON \"public\".\"Statistics\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_update_public_Statistics_characterId_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_insert_public_Statistics_consumableId_into_oplog ON \"public\".\"Statistics\";",
        "    CREATE OR REPLACE FUNCTION compensation_insert_public_Statistics_consumableId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Statistics';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'Consumable',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"Consumable\"\n          WHERE \"id\" = NEW.\"consumableId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_insert_public_Statistics_consumableId_into_oplog\n  AFTER INSERT ON \"public\".\"Statistics\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_insert_public_Statistics_consumableId_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_update_public_Statistics_consumableId_into_oplog ON \"public\".\"Statistics\";",
        "    CREATE OR REPLACE FUNCTION compensation_update_public_Statistics_consumableId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Statistics';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'Consumable',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"Consumable\"\n          WHERE \"id\" = NEW.\"consumableId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_update_public_Statistics_consumableId_into_oplog\n  AFTER UPDATE ON \"public\".\"Statistics\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_update_public_Statistics_consumableId_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_insert_public_Statistics_crystalId_into_oplog ON \"public\".\"Statistics\";",
        "    CREATE OR REPLACE FUNCTION compensation_insert_public_Statistics_crystalId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Statistics';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'Crystal',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"Crystal\"\n          WHERE \"id\" = NEW.\"crystalId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_insert_public_Statistics_crystalId_into_oplog\n  AFTER INSERT ON \"public\".\"Statistics\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_insert_public_Statistics_crystalId_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_update_public_Statistics_crystalId_into_oplog ON \"public\".\"Statistics\";",
        "    CREATE OR REPLACE FUNCTION compensation_update_public_Statistics_crystalId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Statistics';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'Crystal',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"Crystal\"\n          WHERE \"id\" = NEW.\"crystalId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_update_public_Statistics_crystalId_into_oplog\n  AFTER UPDATE ON \"public\".\"Statistics\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_update_public_Statistics_crystalId_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_insert_public_Statistics_mainWeaponId_into_oplog ON \"public\".\"Statistics\";",
        "    CREATE OR REPLACE FUNCTION compensation_insert_public_Statistics_mainWeaponId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Statistics';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'MainWeapon',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"MainWeapon\"\n          WHERE \"id\" = NEW.\"mainWeaponId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_insert_public_Statistics_mainWeaponId_into_oplog\n  AFTER INSERT ON \"public\".\"Statistics\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_insert_public_Statistics_mainWeaponId_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_update_public_Statistics_mainWeaponId_into_oplog ON \"public\".\"Statistics\";",
        "    CREATE OR REPLACE FUNCTION compensation_update_public_Statistics_mainWeaponId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Statistics';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'MainWeapon',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"MainWeapon\"\n          WHERE \"id\" = NEW.\"mainWeaponId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_update_public_Statistics_mainWeaponId_into_oplog\n  AFTER UPDATE ON \"public\".\"Statistics\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_update_public_Statistics_mainWeaponId_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_insert_public_Statistics_monsterId_into_oplog ON \"public\".\"Statistics\";",
        "    CREATE OR REPLACE FUNCTION compensation_insert_public_Statistics_monsterId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Statistics';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'Monster',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"Monster\"\n          WHERE \"id\" = NEW.\"monsterId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_insert_public_Statistics_monsterId_into_oplog\n  AFTER INSERT ON \"public\".\"Statistics\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_insert_public_Statistics_monsterId_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_update_public_Statistics_monsterId_into_oplog ON \"public\".\"Statistics\";",
        "    CREATE OR REPLACE FUNCTION compensation_update_public_Statistics_monsterId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Statistics';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'Monster',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"Monster\"\n          WHERE \"id\" = NEW.\"monsterId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_update_public_Statistics_monsterId_into_oplog\n  AFTER UPDATE ON \"public\".\"Statistics\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_update_public_Statistics_monsterId_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_insert_public_Statistics_petId_into_oplog ON \"public\".\"Statistics\";",
        "    CREATE OR REPLACE FUNCTION compensation_insert_public_Statistics_petId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Statistics';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'Pet',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"Pet\"\n          WHERE \"id\" = NEW.\"petId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_insert_public_Statistics_petId_into_oplog\n  AFTER INSERT ON \"public\".\"Statistics\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_insert_public_Statistics_petId_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_update_public_Statistics_petId_into_oplog ON \"public\".\"Statistics\";",
        "    CREATE OR REPLACE FUNCTION compensation_update_public_Statistics_petId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Statistics';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'Pet',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"Pet\"\n          WHERE \"id\" = NEW.\"petId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_update_public_Statistics_petId_into_oplog\n  AFTER UPDATE ON \"public\".\"Statistics\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_update_public_Statistics_petId_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_insert_public_Statistics_skillId_into_oplog ON \"public\".\"Statistics\";",
        "    CREATE OR REPLACE FUNCTION compensation_insert_public_Statistics_skillId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Statistics';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'Skill',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"Skill\"\n          WHERE \"id\" = NEW.\"skillId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_insert_public_Statistics_skillId_into_oplog\n  AFTER INSERT ON \"public\".\"Statistics\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_insert_public_Statistics_skillId_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_update_public_Statistics_skillId_into_oplog ON \"public\".\"Statistics\";",
        "    CREATE OR REPLACE FUNCTION compensation_update_public_Statistics_skillId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Statistics';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'Skill',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"Skill\"\n          WHERE \"id\" = NEW.\"skillId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_update_public_Statistics_skillId_into_oplog\n  AFTER UPDATE ON \"public\".\"Statistics\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_update_public_Statistics_skillId_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_insert_public_Statistics_specialEquipmentId_into_oplog ON \"public\".\"Statistics\";",
        "    CREATE OR REPLACE FUNCTION compensation_insert_public_Statistics_specialEquipmentId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Statistics';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'SpecialEquipment',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"SpecialEquipment\"\n          WHERE \"id\" = NEW.\"specialEquipmentId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_insert_public_Statistics_specialEquipmentId_into_oplog\n  AFTER INSERT ON \"public\".\"Statistics\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_insert_public_Statistics_specialEquipmentId_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_update_public_Statistics_specialEquipmentId_into_oplog ON \"public\".\"Statistics\";",
        "    CREATE OR REPLACE FUNCTION compensation_update_public_Statistics_specialEquipmentId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Statistics';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'SpecialEquipment',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"SpecialEquipment\"\n          WHERE \"id\" = NEW.\"specialEquipmentId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_update_public_Statistics_specialEquipmentId_into_oplog\n  AFTER UPDATE ON \"public\".\"Statistics\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_update_public_Statistics_specialEquipmentId_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_insert_public_Statistics_subWeaponId_into_oplog ON \"public\".\"Statistics\";",
        "    CREATE OR REPLACE FUNCTION compensation_insert_public_Statistics_subWeaponId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Statistics';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'SubWeapon',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"SubWeapon\"\n          WHERE \"id\" = NEW.\"subWeaponId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_insert_public_Statistics_subWeaponId_into_oplog\n  AFTER INSERT ON \"public\".\"Statistics\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_insert_public_Statistics_subWeaponId_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_update_public_Statistics_subWeaponId_into_oplog ON \"public\".\"Statistics\";",
        "    CREATE OR REPLACE FUNCTION compensation_update_public_Statistics_subWeaponId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Statistics';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'SubWeapon',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"SubWeapon\"\n          WHERE \"id\" = NEW.\"subWeaponId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_update_public_Statistics_subWeaponId_into_oplog\n  AFTER UPDATE ON \"public\".\"Statistics\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_update_public_Statistics_subWeaponId_into_oplog_function();",
        "INSERT INTO \"public\".\"_electric_trigger_settings\" (\"namespace\", \"tablename\", \"flag\")\n  VALUES ('public', 'Monster', 1)\n  ON CONFLICT DO NOTHING;",
        "DROP TRIGGER IF EXISTS update_ensure_public_Monster_primarykey ON \"public\".\"Monster\";",
        "CREATE OR REPLACE FUNCTION update_ensure_public_Monster_primarykey_function()\nRETURNS TRIGGER AS $$\nBEGIN\n  IF OLD.\"id\" IS DISTINCT FROM NEW.\"id\" THEN\n    RAISE EXCEPTION 'Cannot change the value of column id as it belongs to the primary key';\n  END IF;\n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;",
        "CREATE TRIGGER update_ensure_public_Monster_primarykey\n  BEFORE UPDATE ON \"public\".\"Monster\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_ensure_public_Monster_primarykey_function();",
        "DROP TRIGGER IF EXISTS insert_public_Monster_into_oplog ON \"public\".\"Monster\";",
        "    CREATE OR REPLACE FUNCTION insert_public_Monster_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Monster';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'Monster',\n            'INSERT',\n            json_strip_nulls(json_build_object('id', new.\"id\")),\n            jsonb_build_object('address', new.\"address\", 'avoidance', new.\"avoidance\", 'baseLv', new.\"baseLv\", 'block', new.\"block\", 'createdAt', new.\"createdAt\", 'createdByUserId', new.\"createdByUserId\", 'criticalResistance', new.\"criticalResistance\", 'dataSources', new.\"dataSources\", 'difficultyOfMelee', new.\"difficultyOfMelee\", 'difficultyOfRanged', new.\"difficultyOfRanged\", 'difficultyOfTank', new.\"difficultyOfTank\", 'dodge', new.\"dodge\", 'element', new.\"element\", 'experience', new.\"experience\", 'extraDetails', new.\"extraDetails\", 'id', new.\"id\", 'magicalAttackResistanceModifier', new.\"magicalAttackResistanceModifier\", 'magicalDefense', new.\"magicalDefense\", 'magicalResistance', new.\"magicalResistance\", 'maxhp', new.\"maxhp\", 'monsterType', new.\"monsterType\", 'name', new.\"name\", 'normalAttackResistanceModifier', new.\"normalAttackResistanceModifier\", 'physicalAttackResistanceModifier', new.\"physicalAttackResistanceModifier\", 'physicalDefense', new.\"physicalDefense\", 'physicalResistance', new.\"physicalResistance\", 'possibilityOfRunningAround', new.\"possibilityOfRunningAround\", 'radius', new.\"radius\", 'statisticsId', new.\"statisticsId\", 'updatedAt', new.\"updatedAt\", 'updatedByUserId', new.\"updatedByUserId\"),\n            NULL,\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER insert_public_Monster_into_oplog\n  AFTER INSERT ON \"public\".\"Monster\"\n    FOR EACH ROW\n      EXECUTE FUNCTION insert_public_Monster_into_oplog_function();",
        "DROP TRIGGER IF EXISTS update_public_Monster_into_oplog ON \"public\".\"Monster\";",
        "    CREATE OR REPLACE FUNCTION update_public_Monster_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Monster';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'Monster',\n            'UPDATE',\n            json_strip_nulls(json_build_object('id', new.\"id\")),\n            jsonb_build_object('address', new.\"address\", 'avoidance', new.\"avoidance\", 'baseLv', new.\"baseLv\", 'block', new.\"block\", 'createdAt', new.\"createdAt\", 'createdByUserId', new.\"createdByUserId\", 'criticalResistance', new.\"criticalResistance\", 'dataSources', new.\"dataSources\", 'difficultyOfMelee', new.\"difficultyOfMelee\", 'difficultyOfRanged', new.\"difficultyOfRanged\", 'difficultyOfTank', new.\"difficultyOfTank\", 'dodge', new.\"dodge\", 'element', new.\"element\", 'experience', new.\"experience\", 'extraDetails', new.\"extraDetails\", 'id', new.\"id\", 'magicalAttackResistanceModifier', new.\"magicalAttackResistanceModifier\", 'magicalDefense', new.\"magicalDefense\", 'magicalResistance', new.\"magicalResistance\", 'maxhp', new.\"maxhp\", 'monsterType', new.\"monsterType\", 'name', new.\"name\", 'normalAttackResistanceModifier', new.\"normalAttackResistanceModifier\", 'physicalAttackResistanceModifier', new.\"physicalAttackResistanceModifier\", 'physicalDefense', new.\"physicalDefense\", 'physicalResistance', new.\"physicalResistance\", 'possibilityOfRunningAround', new.\"possibilityOfRunningAround\", 'radius', new.\"radius\", 'statisticsId', new.\"statisticsId\", 'updatedAt', new.\"updatedAt\", 'updatedByUserId', new.\"updatedByUserId\"),\n            jsonb_build_object('address', old.\"address\", 'avoidance', old.\"avoidance\", 'baseLv', old.\"baseLv\", 'block', old.\"block\", 'createdAt', old.\"createdAt\", 'createdByUserId', old.\"createdByUserId\", 'criticalResistance', old.\"criticalResistance\", 'dataSources', old.\"dataSources\", 'difficultyOfMelee', old.\"difficultyOfMelee\", 'difficultyOfRanged', old.\"difficultyOfRanged\", 'difficultyOfTank', old.\"difficultyOfTank\", 'dodge', old.\"dodge\", 'element', old.\"element\", 'experience', old.\"experience\", 'extraDetails', old.\"extraDetails\", 'id', old.\"id\", 'magicalAttackResistanceModifier', old.\"magicalAttackResistanceModifier\", 'magicalDefense', old.\"magicalDefense\", 'magicalResistance', old.\"magicalResistance\", 'maxhp', old.\"maxhp\", 'monsterType', old.\"monsterType\", 'name', old.\"name\", 'normalAttackResistanceModifier', old.\"normalAttackResistanceModifier\", 'physicalAttackResistanceModifier', old.\"physicalAttackResistanceModifier\", 'physicalDefense', old.\"physicalDefense\", 'physicalResistance', old.\"physicalResistance\", 'possibilityOfRunningAround', old.\"possibilityOfRunningAround\", 'radius', old.\"radius\", 'statisticsId', old.\"statisticsId\", 'updatedAt', old.\"updatedAt\", 'updatedByUserId', old.\"updatedByUserId\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER update_public_Monster_into_oplog\n  AFTER UPDATE ON \"public\".\"Monster\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_public_Monster_into_oplog_function();",
        "DROP TRIGGER IF EXISTS delete_public_Monster_into_oplog ON \"public\".\"Monster\";",
        "    CREATE OR REPLACE FUNCTION delete_public_Monster_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Monster';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'Monster',\n            'DELETE',\n            json_strip_nulls(json_build_object('id', old.\"id\")),\n            NULL,\n            jsonb_build_object('address', old.\"address\", 'avoidance', old.\"avoidance\", 'baseLv', old.\"baseLv\", 'block', old.\"block\", 'createdAt', old.\"createdAt\", 'createdByUserId', old.\"createdByUserId\", 'criticalResistance', old.\"criticalResistance\", 'dataSources', old.\"dataSources\", 'difficultyOfMelee', old.\"difficultyOfMelee\", 'difficultyOfRanged', old.\"difficultyOfRanged\", 'difficultyOfTank', old.\"difficultyOfTank\", 'dodge', old.\"dodge\", 'element', old.\"element\", 'experience', old.\"experience\", 'extraDetails', old.\"extraDetails\", 'id', old.\"id\", 'magicalAttackResistanceModifier', old.\"magicalAttackResistanceModifier\", 'magicalDefense', old.\"magicalDefense\", 'magicalResistance', old.\"magicalResistance\", 'maxhp', old.\"maxhp\", 'monsterType', old.\"monsterType\", 'name', old.\"name\", 'normalAttackResistanceModifier', old.\"normalAttackResistanceModifier\", 'physicalAttackResistanceModifier', old.\"physicalAttackResistanceModifier\", 'physicalDefense', old.\"physicalDefense\", 'physicalResistance', old.\"physicalResistance\", 'possibilityOfRunningAround', old.\"possibilityOfRunningAround\", 'radius', old.\"radius\", 'statisticsId', old.\"statisticsId\", 'updatedAt', old.\"updatedAt\", 'updatedByUserId', old.\"updatedByUserId\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER delete_public_Monster_into_oplog\n  AFTER DELETE ON \"public\".\"Monster\"\n    FOR EACH ROW\n      EXECUTE FUNCTION delete_public_Monster_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_insert_public_Monster_createdByUserId_into_oplog ON \"public\".\"Monster\";",
        "    CREATE OR REPLACE FUNCTION compensation_insert_public_Monster_createdByUserId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Monster';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'UserCreateData',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('userId', \"userId\"))),\n            jsonb_build_object('userId', \"userId\"),\n            NULL,\n            NULL\n          FROM \"public\".\"UserCreateData\"\n          WHERE \"userId\" = NEW.\"createdByUserId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_insert_public_Monster_createdByUserId_into_oplog\n  AFTER INSERT ON \"public\".\"Monster\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_insert_public_Monster_createdByUserId_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_update_public_Monster_createdByUserId_into_oplog ON \"public\".\"Monster\";",
        "    CREATE OR REPLACE FUNCTION compensation_update_public_Monster_createdByUserId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Monster';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'UserCreateData',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('userId', \"userId\"))),\n            jsonb_build_object('userId', \"userId\"),\n            NULL,\n            NULL\n          FROM \"public\".\"UserCreateData\"\n          WHERE \"userId\" = NEW.\"createdByUserId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_update_public_Monster_createdByUserId_into_oplog\n  AFTER UPDATE ON \"public\".\"Monster\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_update_public_Monster_createdByUserId_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_insert_public_Monster_updatedByUserId_into_oplog ON \"public\".\"Monster\";",
        "    CREATE OR REPLACE FUNCTION compensation_insert_public_Monster_updatedByUserId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Monster';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'UserUpdateData',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('userId', \"userId\"))),\n            jsonb_build_object('userId', \"userId\"),\n            NULL,\n            NULL\n          FROM \"public\".\"UserUpdateData\"\n          WHERE \"userId\" = NEW.\"updatedByUserId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_insert_public_Monster_updatedByUserId_into_oplog\n  AFTER INSERT ON \"public\".\"Monster\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_insert_public_Monster_updatedByUserId_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_update_public_Monster_updatedByUserId_into_oplog ON \"public\".\"Monster\";",
        "    CREATE OR REPLACE FUNCTION compensation_update_public_Monster_updatedByUserId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Monster';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'UserUpdateData',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('userId', \"userId\"))),\n            jsonb_build_object('userId', \"userId\"),\n            NULL,\n            NULL\n          FROM \"public\".\"UserUpdateData\"\n          WHERE \"userId\" = NEW.\"updatedByUserId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_update_public_Monster_updatedByUserId_into_oplog\n  AFTER UPDATE ON \"public\".\"Monster\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_update_public_Monster_updatedByUserId_into_oplog_function();",
        "INSERT INTO \"public\".\"_electric_trigger_settings\" (\"namespace\", \"tablename\", \"flag\")\n  VALUES ('public', 'Modifier', 1)\n  ON CONFLICT DO NOTHING;",
        "DROP TRIGGER IF EXISTS update_ensure_public_Modifier_primarykey ON \"public\".\"Modifier\";",
        "CREATE OR REPLACE FUNCTION update_ensure_public_Modifier_primarykey_function()\nRETURNS TRIGGER AS $$\nBEGIN\n  IF OLD.\"id\" IS DISTINCT FROM NEW.\"id\" THEN\n    RAISE EXCEPTION 'Cannot change the value of column id as it belongs to the primary key';\n  END IF;\n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;",
        "CREATE TRIGGER update_ensure_public_Modifier_primarykey\n  BEFORE UPDATE ON \"public\".\"Modifier\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_ensure_public_Modifier_primarykey_function();",
        "DROP TRIGGER IF EXISTS insert_public_Modifier_into_oplog ON \"public\".\"Modifier\";",
        "    CREATE OR REPLACE FUNCTION insert_public_Modifier_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Modifier';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'Modifier',\n            'INSERT',\n            json_strip_nulls(json_build_object('id', new.\"id\")),\n            jsonb_build_object('formula', new.\"formula\", 'id', new.\"id\"),\n            NULL,\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER insert_public_Modifier_into_oplog\n  AFTER INSERT ON \"public\".\"Modifier\"\n    FOR EACH ROW\n      EXECUTE FUNCTION insert_public_Modifier_into_oplog_function();",
        "DROP TRIGGER IF EXISTS update_public_Modifier_into_oplog ON \"public\".\"Modifier\";",
        "    CREATE OR REPLACE FUNCTION update_public_Modifier_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Modifier';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'Modifier',\n            'UPDATE',\n            json_strip_nulls(json_build_object('id', new.\"id\")),\n            jsonb_build_object('formula', new.\"formula\", 'id', new.\"id\"),\n            jsonb_build_object('formula', old.\"formula\", 'id', old.\"id\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER update_public_Modifier_into_oplog\n  AFTER UPDATE ON \"public\".\"Modifier\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_public_Modifier_into_oplog_function();",
        "DROP TRIGGER IF EXISTS delete_public_Modifier_into_oplog ON \"public\".\"Modifier\";",
        "    CREATE OR REPLACE FUNCTION delete_public_Modifier_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Modifier';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'Modifier',\n            'DELETE',\n            json_strip_nulls(json_build_object('id', old.\"id\")),\n            NULL,\n            jsonb_build_object('formula', old.\"formula\", 'id', old.\"id\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER delete_public_Modifier_into_oplog\n  AFTER DELETE ON \"public\".\"Modifier\"\n    FOR EACH ROW\n      EXECUTE FUNCTION delete_public_Modifier_into_oplog_function();",
        "INSERT INTO \"public\".\"_electric_trigger_settings\" (\"namespace\", \"tablename\", \"flag\")\n  VALUES ('public', 'ModifiersList', 1)\n  ON CONFLICT DO NOTHING;",
        "DROP TRIGGER IF EXISTS update_ensure_public_ModifiersList_primarykey ON \"public\".\"ModifiersList\";",
        "CREATE OR REPLACE FUNCTION update_ensure_public_ModifiersList_primarykey_function()\nRETURNS TRIGGER AS $$\nBEGIN\n  IF OLD.\"id\" IS DISTINCT FROM NEW.\"id\" THEN\n    RAISE EXCEPTION 'Cannot change the value of column id as it belongs to the primary key';\n  END IF;\n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;",
        "CREATE TRIGGER update_ensure_public_ModifiersList_primarykey\n  BEFORE UPDATE ON \"public\".\"ModifiersList\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_ensure_public_ModifiersList_primarykey_function();",
        "DROP TRIGGER IF EXISTS insert_public_ModifiersList_into_oplog ON \"public\".\"ModifiersList\";",
        "    CREATE OR REPLACE FUNCTION insert_public_ModifiersList_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'ModifiersList';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'ModifiersList',\n            'INSERT',\n            json_strip_nulls(json_build_object('id', new.\"id\")),\n            jsonb_build_object('id', new.\"id\", 'name', new.\"name\"),\n            NULL,\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER insert_public_ModifiersList_into_oplog\n  AFTER INSERT ON \"public\".\"ModifiersList\"\n    FOR EACH ROW\n      EXECUTE FUNCTION insert_public_ModifiersList_into_oplog_function();",
        "DROP TRIGGER IF EXISTS update_public_ModifiersList_into_oplog ON \"public\".\"ModifiersList\";",
        "    CREATE OR REPLACE FUNCTION update_public_ModifiersList_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'ModifiersList';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'ModifiersList',\n            'UPDATE',\n            json_strip_nulls(json_build_object('id', new.\"id\")),\n            jsonb_build_object('id', new.\"id\", 'name', new.\"name\"),\n            jsonb_build_object('id', old.\"id\", 'name', old.\"name\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER update_public_ModifiersList_into_oplog\n  AFTER UPDATE ON \"public\".\"ModifiersList\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_public_ModifiersList_into_oplog_function();",
        "DROP TRIGGER IF EXISTS delete_public_ModifiersList_into_oplog ON \"public\".\"ModifiersList\";",
        "    CREATE OR REPLACE FUNCTION delete_public_ModifiersList_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'ModifiersList';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'ModifiersList',\n            'DELETE',\n            json_strip_nulls(json_build_object('id', old.\"id\")),\n            NULL,\n            jsonb_build_object('id', old.\"id\", 'name', old.\"name\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER delete_public_ModifiersList_into_oplog\n  AFTER DELETE ON \"public\".\"ModifiersList\"\n    FOR EACH ROW\n      EXECUTE FUNCTION delete_public_ModifiersList_into_oplog_function();",
        "INSERT INTO \"public\".\"_electric_trigger_settings\" (\"namespace\", \"tablename\", \"flag\")\n  VALUES ('public', 'Character', 1)\n  ON CONFLICT DO NOTHING;",
        "DROP TRIGGER IF EXISTS update_ensure_public_Character_primarykey ON \"public\".\"Character\";",
        "CREATE OR REPLACE FUNCTION update_ensure_public_Character_primarykey_function()\nRETURNS TRIGGER AS $$\nBEGIN\n  IF OLD.\"id\" IS DISTINCT FROM NEW.\"id\" THEN\n    RAISE EXCEPTION 'Cannot change the value of column id as it belongs to the primary key';\n  END IF;\n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;",
        "CREATE TRIGGER update_ensure_public_Character_primarykey\n  BEFORE UPDATE ON \"public\".\"Character\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_ensure_public_Character_primarykey_function();",
        "DROP TRIGGER IF EXISTS insert_public_Character_into_oplog ON \"public\".\"Character\";",
        "    CREATE OR REPLACE FUNCTION insert_public_Character_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Character';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'Character',\n            'INSERT',\n            json_strip_nulls(json_build_object('id', new.\"id\")),\n            jsonb_build_object('CuisineModifiersListId', new.\"CuisineModifiersListId\", 'additionalEquipmentId', new.\"additionalEquipmentId\", 'baseAgi', new.\"baseAgi\", 'baseDex', new.\"baseDex\", 'baseInt', new.\"baseInt\", 'baseStr', new.\"baseStr\", 'baseVit', new.\"baseVit\", 'bodyArmorId', new.\"bodyArmorId\", 'characterType', new.\"characterType\", 'createdAt', new.\"createdAt\", 'createdByUserId', new.\"createdByUserId\", 'extraDetails', new.\"extraDetails\", 'fashionModifiersListId', new.\"fashionModifiersListId\", 'id', new.\"id\", 'lv', new.\"lv\", 'mainWeaponId', new.\"mainWeaponId\", 'modifiersListId', new.\"modifiersListId\", 'name', new.\"name\", 'petId', new.\"petId\", 'specialAbiType', new.\"specialAbiType\", 'specialAbiValue', new.\"specialAbiValue\", 'specialEquipmentId', new.\"specialEquipmentId\", 'statisticsId', new.\"statisticsId\", 'subWeaponId', new.\"subWeaponId\", 'updatedAt', new.\"updatedAt\", 'updatedByUserId', new.\"updatedByUserId\"),\n            NULL,\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER insert_public_Character_into_oplog\n  AFTER INSERT ON \"public\".\"Character\"\n    FOR EACH ROW\n      EXECUTE FUNCTION insert_public_Character_into_oplog_function();",
        "DROP TRIGGER IF EXISTS update_public_Character_into_oplog ON \"public\".\"Character\";",
        "    CREATE OR REPLACE FUNCTION update_public_Character_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Character';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'Character',\n            'UPDATE',\n            json_strip_nulls(json_build_object('id', new.\"id\")),\n            jsonb_build_object('CuisineModifiersListId', new.\"CuisineModifiersListId\", 'additionalEquipmentId', new.\"additionalEquipmentId\", 'baseAgi', new.\"baseAgi\", 'baseDex', new.\"baseDex\", 'baseInt', new.\"baseInt\", 'baseStr', new.\"baseStr\", 'baseVit', new.\"baseVit\", 'bodyArmorId', new.\"bodyArmorId\", 'characterType', new.\"characterType\", 'createdAt', new.\"createdAt\", 'createdByUserId', new.\"createdByUserId\", 'extraDetails', new.\"extraDetails\", 'fashionModifiersListId', new.\"fashionModifiersListId\", 'id', new.\"id\", 'lv', new.\"lv\", 'mainWeaponId', new.\"mainWeaponId\", 'modifiersListId', new.\"modifiersListId\", 'name', new.\"name\", 'petId', new.\"petId\", 'specialAbiType', new.\"specialAbiType\", 'specialAbiValue', new.\"specialAbiValue\", 'specialEquipmentId', new.\"specialEquipmentId\", 'statisticsId', new.\"statisticsId\", 'subWeaponId', new.\"subWeaponId\", 'updatedAt', new.\"updatedAt\", 'updatedByUserId', new.\"updatedByUserId\"),\n            jsonb_build_object('CuisineModifiersListId', old.\"CuisineModifiersListId\", 'additionalEquipmentId', old.\"additionalEquipmentId\", 'baseAgi', old.\"baseAgi\", 'baseDex', old.\"baseDex\", 'baseInt', old.\"baseInt\", 'baseStr', old.\"baseStr\", 'baseVit', old.\"baseVit\", 'bodyArmorId', old.\"bodyArmorId\", 'characterType', old.\"characterType\", 'createdAt', old.\"createdAt\", 'createdByUserId', old.\"createdByUserId\", 'extraDetails', old.\"extraDetails\", 'fashionModifiersListId', old.\"fashionModifiersListId\", 'id', old.\"id\", 'lv', old.\"lv\", 'mainWeaponId', old.\"mainWeaponId\", 'modifiersListId', old.\"modifiersListId\", 'name', old.\"name\", 'petId', old.\"petId\", 'specialAbiType', old.\"specialAbiType\", 'specialAbiValue', old.\"specialAbiValue\", 'specialEquipmentId', old.\"specialEquipmentId\", 'statisticsId', old.\"statisticsId\", 'subWeaponId', old.\"subWeaponId\", 'updatedAt', old.\"updatedAt\", 'updatedByUserId', old.\"updatedByUserId\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER update_public_Character_into_oplog\n  AFTER UPDATE ON \"public\".\"Character\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_public_Character_into_oplog_function();",
        "DROP TRIGGER IF EXISTS delete_public_Character_into_oplog ON \"public\".\"Character\";",
        "    CREATE OR REPLACE FUNCTION delete_public_Character_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Character';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'Character',\n            'DELETE',\n            json_strip_nulls(json_build_object('id', old.\"id\")),\n            NULL,\n            jsonb_build_object('CuisineModifiersListId', old.\"CuisineModifiersListId\", 'additionalEquipmentId', old.\"additionalEquipmentId\", 'baseAgi', old.\"baseAgi\", 'baseDex', old.\"baseDex\", 'baseInt', old.\"baseInt\", 'baseStr', old.\"baseStr\", 'baseVit', old.\"baseVit\", 'bodyArmorId', old.\"bodyArmorId\", 'characterType', old.\"characterType\", 'createdAt', old.\"createdAt\", 'createdByUserId', old.\"createdByUserId\", 'extraDetails', old.\"extraDetails\", 'fashionModifiersListId', old.\"fashionModifiersListId\", 'id', old.\"id\", 'lv', old.\"lv\", 'mainWeaponId', old.\"mainWeaponId\", 'modifiersListId', old.\"modifiersListId\", 'name', old.\"name\", 'petId', old.\"petId\", 'specialAbiType', old.\"specialAbiType\", 'specialAbiValue', old.\"specialAbiValue\", 'specialEquipmentId', old.\"specialEquipmentId\", 'statisticsId', old.\"statisticsId\", 'subWeaponId', old.\"subWeaponId\", 'updatedAt', old.\"updatedAt\", 'updatedByUserId', old.\"updatedByUserId\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER delete_public_Character_into_oplog\n  AFTER DELETE ON \"public\".\"Character\"\n    FOR EACH ROW\n      EXECUTE FUNCTION delete_public_Character_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_insert_public_Character_CuisineModifiersListId_into_oplog ON \"public\".\"Character\";",
        "    CREATE OR REPLACE FUNCTION compensation_insert_public_Character_CuisineModifiersListId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Character';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'ModifiersList',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"ModifiersList\"\n          WHERE \"id\" = NEW.\"CuisineModifiersListId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_insert_public_Character_CuisineModifiersListId_into_oplog\n  AFTER INSERT ON \"public\".\"Character\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_insert_public_Character_CuisineModifiersListId_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_update_public_Character_CuisineModifiersListId_into_oplog ON \"public\".\"Character\";",
        "    CREATE OR REPLACE FUNCTION compensation_update_public_Character_CuisineModifiersListId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Character';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'ModifiersList',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"ModifiersList\"\n          WHERE \"id\" = NEW.\"CuisineModifiersListId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_update_public_Character_CuisineModifiersListId_into_oplog\n  AFTER UPDATE ON \"public\".\"Character\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_update_public_Character_CuisineModifiersListId_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_insert_public_Character_additionalEquipmentId_into_oplog ON \"public\".\"Character\";",
        "    CREATE OR REPLACE FUNCTION compensation_insert_public_Character_additionalEquipmentId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Character';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'AdditionalEquipment',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"AdditionalEquipment\"\n          WHERE \"id\" = NEW.\"additionalEquipmentId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_insert_public_Character_additionalEquipmentId_into_oplog\n  AFTER INSERT ON \"public\".\"Character\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_insert_public_Character_additionalEquipmentId_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_update_public_Character_additionalEquipmentId_into_oplog ON \"public\".\"Character\";",
        "    CREATE OR REPLACE FUNCTION compensation_update_public_Character_additionalEquipmentId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Character';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'AdditionalEquipment',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"AdditionalEquipment\"\n          WHERE \"id\" = NEW.\"additionalEquipmentId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_update_public_Character_additionalEquipmentId_into_oplog\n  AFTER UPDATE ON \"public\".\"Character\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_update_public_Character_additionalEquipmentId_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_insert_public_Character_bodyArmorId_into_oplog ON \"public\".\"Character\";",
        "    CREATE OR REPLACE FUNCTION compensation_insert_public_Character_bodyArmorId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Character';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'BodyArmor',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"BodyArmor\"\n          WHERE \"id\" = NEW.\"bodyArmorId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_insert_public_Character_bodyArmorId_into_oplog\n  AFTER INSERT ON \"public\".\"Character\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_insert_public_Character_bodyArmorId_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_update_public_Character_bodyArmorId_into_oplog ON \"public\".\"Character\";",
        "    CREATE OR REPLACE FUNCTION compensation_update_public_Character_bodyArmorId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Character';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'BodyArmor',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"BodyArmor\"\n          WHERE \"id\" = NEW.\"bodyArmorId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_update_public_Character_bodyArmorId_into_oplog\n  AFTER UPDATE ON \"public\".\"Character\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_update_public_Character_bodyArmorId_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_insert_public_Character_createdByUserId_into_oplog ON \"public\".\"Character\";",
        "    CREATE OR REPLACE FUNCTION compensation_insert_public_Character_createdByUserId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Character';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'UserCreateData',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('userId', \"userId\"))),\n            jsonb_build_object('userId', \"userId\"),\n            NULL,\n            NULL\n          FROM \"public\".\"UserCreateData\"\n          WHERE \"userId\" = NEW.\"createdByUserId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_insert_public_Character_createdByUserId_into_oplog\n  AFTER INSERT ON \"public\".\"Character\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_insert_public_Character_createdByUserId_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_update_public_Character_createdByUserId_into_oplog ON \"public\".\"Character\";",
        "    CREATE OR REPLACE FUNCTION compensation_update_public_Character_createdByUserId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Character';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'UserCreateData',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('userId', \"userId\"))),\n            jsonb_build_object('userId', \"userId\"),\n            NULL,\n            NULL\n          FROM \"public\".\"UserCreateData\"\n          WHERE \"userId\" = NEW.\"createdByUserId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_update_public_Character_createdByUserId_into_oplog\n  AFTER UPDATE ON \"public\".\"Character\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_update_public_Character_createdByUserId_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_insert_public_Character_fashionModifiersListId_into_oplog ON \"public\".\"Character\";",
        "    CREATE OR REPLACE FUNCTION compensation_insert_public_Character_fashionModifiersListId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Character';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'ModifiersList',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"ModifiersList\"\n          WHERE \"id\" = NEW.\"fashionModifiersListId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_insert_public_Character_fashionModifiersListId_into_oplog\n  AFTER INSERT ON \"public\".\"Character\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_insert_public_Character_fashionModifiersListId_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_update_public_Character_fashionModifiersListId_into_oplog ON \"public\".\"Character\";",
        "    CREATE OR REPLACE FUNCTION compensation_update_public_Character_fashionModifiersListId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Character';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'ModifiersList',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"ModifiersList\"\n          WHERE \"id\" = NEW.\"fashionModifiersListId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_update_public_Character_fashionModifiersListId_into_oplog\n  AFTER UPDATE ON \"public\".\"Character\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_update_public_Character_fashionModifiersListId_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_insert_public_Character_mainWeaponId_into_oplog ON \"public\".\"Character\";",
        "    CREATE OR REPLACE FUNCTION compensation_insert_public_Character_mainWeaponId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Character';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'MainWeapon',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"MainWeapon\"\n          WHERE \"id\" = NEW.\"mainWeaponId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_insert_public_Character_mainWeaponId_into_oplog\n  AFTER INSERT ON \"public\".\"Character\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_insert_public_Character_mainWeaponId_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_update_public_Character_mainWeaponId_into_oplog ON \"public\".\"Character\";",
        "    CREATE OR REPLACE FUNCTION compensation_update_public_Character_mainWeaponId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Character';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'MainWeapon',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"MainWeapon\"\n          WHERE \"id\" = NEW.\"mainWeaponId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_update_public_Character_mainWeaponId_into_oplog\n  AFTER UPDATE ON \"public\".\"Character\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_update_public_Character_mainWeaponId_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_insert_public_Character_modifiersListId_into_oplog ON \"public\".\"Character\";",
        "    CREATE OR REPLACE FUNCTION compensation_insert_public_Character_modifiersListId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Character';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'ModifiersList',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"ModifiersList\"\n          WHERE \"id\" = NEW.\"modifiersListId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_insert_public_Character_modifiersListId_into_oplog\n  AFTER INSERT ON \"public\".\"Character\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_insert_public_Character_modifiersListId_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_update_public_Character_modifiersListId_into_oplog ON \"public\".\"Character\";",
        "    CREATE OR REPLACE FUNCTION compensation_update_public_Character_modifiersListId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Character';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'ModifiersList',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"ModifiersList\"\n          WHERE \"id\" = NEW.\"modifiersListId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_update_public_Character_modifiersListId_into_oplog\n  AFTER UPDATE ON \"public\".\"Character\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_update_public_Character_modifiersListId_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_insert_public_Character_petId_into_oplog ON \"public\".\"Character\";",
        "    CREATE OR REPLACE FUNCTION compensation_insert_public_Character_petId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Character';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'Pet',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"Pet\"\n          WHERE \"id\" = NEW.\"petId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_insert_public_Character_petId_into_oplog\n  AFTER INSERT ON \"public\".\"Character\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_insert_public_Character_petId_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_update_public_Character_petId_into_oplog ON \"public\".\"Character\";",
        "    CREATE OR REPLACE FUNCTION compensation_update_public_Character_petId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Character';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'Pet',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"Pet\"\n          WHERE \"id\" = NEW.\"petId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_update_public_Character_petId_into_oplog\n  AFTER UPDATE ON \"public\".\"Character\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_update_public_Character_petId_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_insert_public_Character_specialEquipmentId_into_oplog ON \"public\".\"Character\";",
        "    CREATE OR REPLACE FUNCTION compensation_insert_public_Character_specialEquipmentId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Character';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'SpecialEquipment',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"SpecialEquipment\"\n          WHERE \"id\" = NEW.\"specialEquipmentId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_insert_public_Character_specialEquipmentId_into_oplog\n  AFTER INSERT ON \"public\".\"Character\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_insert_public_Character_specialEquipmentId_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_update_public_Character_specialEquipmentId_into_oplog ON \"public\".\"Character\";",
        "    CREATE OR REPLACE FUNCTION compensation_update_public_Character_specialEquipmentId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Character';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'SpecialEquipment',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"SpecialEquipment\"\n          WHERE \"id\" = NEW.\"specialEquipmentId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_update_public_Character_specialEquipmentId_into_oplog\n  AFTER UPDATE ON \"public\".\"Character\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_update_public_Character_specialEquipmentId_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_insert_public_Character_subWeaponId_into_oplog ON \"public\".\"Character\";",
        "    CREATE OR REPLACE FUNCTION compensation_insert_public_Character_subWeaponId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Character';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'SubWeapon',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"SubWeapon\"\n          WHERE \"id\" = NEW.\"subWeaponId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_insert_public_Character_subWeaponId_into_oplog\n  AFTER INSERT ON \"public\".\"Character\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_insert_public_Character_subWeaponId_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_update_public_Character_subWeaponId_into_oplog ON \"public\".\"Character\";",
        "    CREATE OR REPLACE FUNCTION compensation_update_public_Character_subWeaponId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Character';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'SubWeapon',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"SubWeapon\"\n          WHERE \"id\" = NEW.\"subWeaponId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_update_public_Character_subWeaponId_into_oplog\n  AFTER UPDATE ON \"public\".\"Character\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_update_public_Character_subWeaponId_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_insert_public_Character_updatedByUserId_into_oplog ON \"public\".\"Character\";",
        "    CREATE OR REPLACE FUNCTION compensation_insert_public_Character_updatedByUserId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Character';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'UserUpdateData',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('userId', \"userId\"))),\n            jsonb_build_object('userId', \"userId\"),\n            NULL,\n            NULL\n          FROM \"public\".\"UserUpdateData\"\n          WHERE \"userId\" = NEW.\"updatedByUserId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_insert_public_Character_updatedByUserId_into_oplog\n  AFTER INSERT ON \"public\".\"Character\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_insert_public_Character_updatedByUserId_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_update_public_Character_updatedByUserId_into_oplog ON \"public\".\"Character\";",
        "    CREATE OR REPLACE FUNCTION compensation_update_public_Character_updatedByUserId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Character';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'UserUpdateData',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('userId', \"userId\"))),\n            jsonb_build_object('userId', \"userId\"),\n            NULL,\n            NULL\n          FROM \"public\".\"UserUpdateData\"\n          WHERE \"userId\" = NEW.\"updatedByUserId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_update_public_Character_updatedByUserId_into_oplog\n  AFTER UPDATE ON \"public\".\"Character\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_update_public_Character_updatedByUserId_into_oplog_function();",
        "INSERT INTO \"public\".\"_electric_trigger_settings\" (\"namespace\", \"tablename\", \"flag\")\n  VALUES ('public', 'Crystal', 1)\n  ON CONFLICT DO NOTHING;",
        "DROP TRIGGER IF EXISTS update_ensure_public_Crystal_primarykey ON \"public\".\"Crystal\";",
        "CREATE OR REPLACE FUNCTION update_ensure_public_Crystal_primarykey_function()\nRETURNS TRIGGER AS $$\nBEGIN\n  IF OLD.\"id\" IS DISTINCT FROM NEW.\"id\" THEN\n    RAISE EXCEPTION 'Cannot change the value of column id as it belongs to the primary key';\n  END IF;\n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;",
        "CREATE TRIGGER update_ensure_public_Crystal_primarykey\n  BEFORE UPDATE ON \"public\".\"Crystal\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_ensure_public_Crystal_primarykey_function();",
        "DROP TRIGGER IF EXISTS insert_public_Crystal_into_oplog ON \"public\".\"Crystal\";",
        "    CREATE OR REPLACE FUNCTION insert_public_Crystal_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Crystal';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'Crystal',\n            'INSERT',\n            json_strip_nulls(json_build_object('id', new.\"id\")),\n            jsonb_build_object('createdAt', new.\"createdAt\", 'createdByUserId', new.\"createdByUserId\", 'crystalType', new.\"crystalType\", 'dataSources', new.\"dataSources\", 'extraDetails', new.\"extraDetails\", 'front', new.\"front\", 'id', new.\"id\", 'modifiersListId', new.\"modifiersListId\", 'name', new.\"name\", 'statisticsId', new.\"statisticsId\", 'updatedAt', new.\"updatedAt\", 'updatedByUserId', new.\"updatedByUserId\"),\n            NULL,\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER insert_public_Crystal_into_oplog\n  AFTER INSERT ON \"public\".\"Crystal\"\n    FOR EACH ROW\n      EXECUTE FUNCTION insert_public_Crystal_into_oplog_function();",
        "DROP TRIGGER IF EXISTS update_public_Crystal_into_oplog ON \"public\".\"Crystal\";",
        "    CREATE OR REPLACE FUNCTION update_public_Crystal_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Crystal';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'Crystal',\n            'UPDATE',\n            json_strip_nulls(json_build_object('id', new.\"id\")),\n            jsonb_build_object('createdAt', new.\"createdAt\", 'createdByUserId', new.\"createdByUserId\", 'crystalType', new.\"crystalType\", 'dataSources', new.\"dataSources\", 'extraDetails', new.\"extraDetails\", 'front', new.\"front\", 'id', new.\"id\", 'modifiersListId', new.\"modifiersListId\", 'name', new.\"name\", 'statisticsId', new.\"statisticsId\", 'updatedAt', new.\"updatedAt\", 'updatedByUserId', new.\"updatedByUserId\"),\n            jsonb_build_object('createdAt', old.\"createdAt\", 'createdByUserId', old.\"createdByUserId\", 'crystalType', old.\"crystalType\", 'dataSources', old.\"dataSources\", 'extraDetails', old.\"extraDetails\", 'front', old.\"front\", 'id', old.\"id\", 'modifiersListId', old.\"modifiersListId\", 'name', old.\"name\", 'statisticsId', old.\"statisticsId\", 'updatedAt', old.\"updatedAt\", 'updatedByUserId', old.\"updatedByUserId\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER update_public_Crystal_into_oplog\n  AFTER UPDATE ON \"public\".\"Crystal\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_public_Crystal_into_oplog_function();",
        "DROP TRIGGER IF EXISTS delete_public_Crystal_into_oplog ON \"public\".\"Crystal\";",
        "    CREATE OR REPLACE FUNCTION delete_public_Crystal_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Crystal';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'Crystal',\n            'DELETE',\n            json_strip_nulls(json_build_object('id', old.\"id\")),\n            NULL,\n            jsonb_build_object('createdAt', old.\"createdAt\", 'createdByUserId', old.\"createdByUserId\", 'crystalType', old.\"crystalType\", 'dataSources', old.\"dataSources\", 'extraDetails', old.\"extraDetails\", 'front', old.\"front\", 'id', old.\"id\", 'modifiersListId', old.\"modifiersListId\", 'name', old.\"name\", 'statisticsId', old.\"statisticsId\", 'updatedAt', old.\"updatedAt\", 'updatedByUserId', old.\"updatedByUserId\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER delete_public_Crystal_into_oplog\n  AFTER DELETE ON \"public\".\"Crystal\"\n    FOR EACH ROW\n      EXECUTE FUNCTION delete_public_Crystal_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_insert_public_Crystal_createdByUserId_into_oplog ON \"public\".\"Crystal\";",
        "    CREATE OR REPLACE FUNCTION compensation_insert_public_Crystal_createdByUserId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Crystal';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'UserCreateData',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('userId', \"userId\"))),\n            jsonb_build_object('userId', \"userId\"),\n            NULL,\n            NULL\n          FROM \"public\".\"UserCreateData\"\n          WHERE \"userId\" = NEW.\"createdByUserId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_insert_public_Crystal_createdByUserId_into_oplog\n  AFTER INSERT ON \"public\".\"Crystal\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_insert_public_Crystal_createdByUserId_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_update_public_Crystal_createdByUserId_into_oplog ON \"public\".\"Crystal\";",
        "    CREATE OR REPLACE FUNCTION compensation_update_public_Crystal_createdByUserId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Crystal';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'UserCreateData',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('userId', \"userId\"))),\n            jsonb_build_object('userId', \"userId\"),\n            NULL,\n            NULL\n          FROM \"public\".\"UserCreateData\"\n          WHERE \"userId\" = NEW.\"createdByUserId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_update_public_Crystal_createdByUserId_into_oplog\n  AFTER UPDATE ON \"public\".\"Crystal\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_update_public_Crystal_createdByUserId_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_insert_public_Crystal_modifiersListId_into_oplog ON \"public\".\"Crystal\";",
        "    CREATE OR REPLACE FUNCTION compensation_insert_public_Crystal_modifiersListId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Crystal';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'ModifiersList',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"ModifiersList\"\n          WHERE \"id\" = NEW.\"modifiersListId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_insert_public_Crystal_modifiersListId_into_oplog\n  AFTER INSERT ON \"public\".\"Crystal\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_insert_public_Crystal_modifiersListId_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_update_public_Crystal_modifiersListId_into_oplog ON \"public\".\"Crystal\";",
        "    CREATE OR REPLACE FUNCTION compensation_update_public_Crystal_modifiersListId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Crystal';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'ModifiersList',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"ModifiersList\"\n          WHERE \"id\" = NEW.\"modifiersListId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_update_public_Crystal_modifiersListId_into_oplog\n  AFTER UPDATE ON \"public\".\"Crystal\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_update_public_Crystal_modifiersListId_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_insert_public_Crystal_updatedByUserId_into_oplog ON \"public\".\"Crystal\";",
        "    CREATE OR REPLACE FUNCTION compensation_insert_public_Crystal_updatedByUserId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Crystal';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'UserUpdateData',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('userId', \"userId\"))),\n            jsonb_build_object('userId', \"userId\"),\n            NULL,\n            NULL\n          FROM \"public\".\"UserUpdateData\"\n          WHERE \"userId\" = NEW.\"updatedByUserId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_insert_public_Crystal_updatedByUserId_into_oplog\n  AFTER INSERT ON \"public\".\"Crystal\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_insert_public_Crystal_updatedByUserId_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_update_public_Crystal_updatedByUserId_into_oplog ON \"public\".\"Crystal\";",
        "    CREATE OR REPLACE FUNCTION compensation_update_public_Crystal_updatedByUserId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Crystal';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'UserUpdateData',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('userId', \"userId\"))),\n            jsonb_build_object('userId', \"userId\"),\n            NULL,\n            NULL\n          FROM \"public\".\"UserUpdateData\"\n          WHERE \"userId\" = NEW.\"updatedByUserId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_update_public_Crystal_updatedByUserId_into_oplog\n  AFTER UPDATE ON \"public\".\"Crystal\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_update_public_Crystal_updatedByUserId_into_oplog_function();",
        "INSERT INTO \"public\".\"_electric_trigger_settings\" (\"namespace\", \"tablename\", \"flag\")\n  VALUES ('public', 'MainWeapon', 1)\n  ON CONFLICT DO NOTHING;",
        "DROP TRIGGER IF EXISTS update_ensure_public_MainWeapon_primarykey ON \"public\".\"MainWeapon\";",
        "CREATE OR REPLACE FUNCTION update_ensure_public_MainWeapon_primarykey_function()\nRETURNS TRIGGER AS $$\nBEGIN\n  IF OLD.\"id\" IS DISTINCT FROM NEW.\"id\" THEN\n    RAISE EXCEPTION 'Cannot change the value of column id as it belongs to the primary key';\n  END IF;\n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;",
        "CREATE TRIGGER update_ensure_public_MainWeapon_primarykey\n  BEFORE UPDATE ON \"public\".\"MainWeapon\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_ensure_public_MainWeapon_primarykey_function();",
        "DROP TRIGGER IF EXISTS insert_public_MainWeapon_into_oplog ON \"public\".\"MainWeapon\";",
        "    CREATE OR REPLACE FUNCTION insert_public_MainWeapon_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'MainWeapon';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'MainWeapon',\n            'INSERT',\n            json_strip_nulls(json_build_object('id', new.\"id\")),\n            jsonb_build_object('baseAtk', new.\"baseAtk\", 'createdAt', new.\"createdAt\", 'createdByUserId', new.\"createdByUserId\", 'dataSources', new.\"dataSources\", 'element', new.\"element\", 'extraDetails', new.\"extraDetails\", 'id', new.\"id\", 'mainWeaponType', new.\"mainWeaponType\", 'modifiersListId', new.\"modifiersListId\", 'name', new.\"name\", 'refinement', new.\"refinement\", 'stability', new.\"stability\", 'statisticsId', new.\"statisticsId\", 'updatedAt', new.\"updatedAt\", 'updatedByUserId', new.\"updatedByUserId\"),\n            NULL,\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER insert_public_MainWeapon_into_oplog\n  AFTER INSERT ON \"public\".\"MainWeapon\"\n    FOR EACH ROW\n      EXECUTE FUNCTION insert_public_MainWeapon_into_oplog_function();",
        "DROP TRIGGER IF EXISTS update_public_MainWeapon_into_oplog ON \"public\".\"MainWeapon\";",
        "    CREATE OR REPLACE FUNCTION update_public_MainWeapon_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'MainWeapon';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'MainWeapon',\n            'UPDATE',\n            json_strip_nulls(json_build_object('id', new.\"id\")),\n            jsonb_build_object('baseAtk', new.\"baseAtk\", 'createdAt', new.\"createdAt\", 'createdByUserId', new.\"createdByUserId\", 'dataSources', new.\"dataSources\", 'element', new.\"element\", 'extraDetails', new.\"extraDetails\", 'id', new.\"id\", 'mainWeaponType', new.\"mainWeaponType\", 'modifiersListId', new.\"modifiersListId\", 'name', new.\"name\", 'refinement', new.\"refinement\", 'stability', new.\"stability\", 'statisticsId', new.\"statisticsId\", 'updatedAt', new.\"updatedAt\", 'updatedByUserId', new.\"updatedByUserId\"),\n            jsonb_build_object('baseAtk', old.\"baseAtk\", 'createdAt', old.\"createdAt\", 'createdByUserId', old.\"createdByUserId\", 'dataSources', old.\"dataSources\", 'element', old.\"element\", 'extraDetails', old.\"extraDetails\", 'id', old.\"id\", 'mainWeaponType', old.\"mainWeaponType\", 'modifiersListId', old.\"modifiersListId\", 'name', old.\"name\", 'refinement', old.\"refinement\", 'stability', old.\"stability\", 'statisticsId', old.\"statisticsId\", 'updatedAt', old.\"updatedAt\", 'updatedByUserId', old.\"updatedByUserId\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER update_public_MainWeapon_into_oplog\n  AFTER UPDATE ON \"public\".\"MainWeapon\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_public_MainWeapon_into_oplog_function();",
        "DROP TRIGGER IF EXISTS delete_public_MainWeapon_into_oplog ON \"public\".\"MainWeapon\";",
        "    CREATE OR REPLACE FUNCTION delete_public_MainWeapon_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'MainWeapon';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'MainWeapon',\n            'DELETE',\n            json_strip_nulls(json_build_object('id', old.\"id\")),\n            NULL,\n            jsonb_build_object('baseAtk', old.\"baseAtk\", 'createdAt', old.\"createdAt\", 'createdByUserId', old.\"createdByUserId\", 'dataSources', old.\"dataSources\", 'element', old.\"element\", 'extraDetails', old.\"extraDetails\", 'id', old.\"id\", 'mainWeaponType', old.\"mainWeaponType\", 'modifiersListId', old.\"modifiersListId\", 'name', old.\"name\", 'refinement', old.\"refinement\", 'stability', old.\"stability\", 'statisticsId', old.\"statisticsId\", 'updatedAt', old.\"updatedAt\", 'updatedByUserId', old.\"updatedByUserId\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER delete_public_MainWeapon_into_oplog\n  AFTER DELETE ON \"public\".\"MainWeapon\"\n    FOR EACH ROW\n      EXECUTE FUNCTION delete_public_MainWeapon_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_insert_public_MainWeapon_createdByUserId_into_oplog ON \"public\".\"MainWeapon\";",
        "    CREATE OR REPLACE FUNCTION compensation_insert_public_MainWeapon_createdByUserId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'MainWeapon';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'UserCreateData',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('userId', \"userId\"))),\n            jsonb_build_object('userId', \"userId\"),\n            NULL,\n            NULL\n          FROM \"public\".\"UserCreateData\"\n          WHERE \"userId\" = NEW.\"createdByUserId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_insert_public_MainWeapon_createdByUserId_into_oplog\n  AFTER INSERT ON \"public\".\"MainWeapon\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_insert_public_MainWeapon_createdByUserId_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_update_public_MainWeapon_createdByUserId_into_oplog ON \"public\".\"MainWeapon\";",
        "    CREATE OR REPLACE FUNCTION compensation_update_public_MainWeapon_createdByUserId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'MainWeapon';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'UserCreateData',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('userId', \"userId\"))),\n            jsonb_build_object('userId', \"userId\"),\n            NULL,\n            NULL\n          FROM \"public\".\"UserCreateData\"\n          WHERE \"userId\" = NEW.\"createdByUserId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_update_public_MainWeapon_createdByUserId_into_oplog\n  AFTER UPDATE ON \"public\".\"MainWeapon\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_update_public_MainWeapon_createdByUserId_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_insert_public_MainWeapon_modifiersListId_into_oplog ON \"public\".\"MainWeapon\";",
        "    CREATE OR REPLACE FUNCTION compensation_insert_public_MainWeapon_modifiersListId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'MainWeapon';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'ModifiersList',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"ModifiersList\"\n          WHERE \"id\" = NEW.\"modifiersListId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_insert_public_MainWeapon_modifiersListId_into_oplog\n  AFTER INSERT ON \"public\".\"MainWeapon\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_insert_public_MainWeapon_modifiersListId_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_update_public_MainWeapon_modifiersListId_into_oplog ON \"public\".\"MainWeapon\";",
        "    CREATE OR REPLACE FUNCTION compensation_update_public_MainWeapon_modifiersListId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'MainWeapon';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'ModifiersList',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"ModifiersList\"\n          WHERE \"id\" = NEW.\"modifiersListId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_update_public_MainWeapon_modifiersListId_into_oplog\n  AFTER UPDATE ON \"public\".\"MainWeapon\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_update_public_MainWeapon_modifiersListId_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_insert_public_MainWeapon_updatedByUserId_into_oplog ON \"public\".\"MainWeapon\";",
        "    CREATE OR REPLACE FUNCTION compensation_insert_public_MainWeapon_updatedByUserId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'MainWeapon';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'UserUpdateData',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('userId', \"userId\"))),\n            jsonb_build_object('userId', \"userId\"),\n            NULL,\n            NULL\n          FROM \"public\".\"UserUpdateData\"\n          WHERE \"userId\" = NEW.\"updatedByUserId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_insert_public_MainWeapon_updatedByUserId_into_oplog\n  AFTER INSERT ON \"public\".\"MainWeapon\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_insert_public_MainWeapon_updatedByUserId_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_update_public_MainWeapon_updatedByUserId_into_oplog ON \"public\".\"MainWeapon\";",
        "    CREATE OR REPLACE FUNCTION compensation_update_public_MainWeapon_updatedByUserId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'MainWeapon';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'UserUpdateData',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('userId', \"userId\"))),\n            jsonb_build_object('userId', \"userId\"),\n            NULL,\n            NULL\n          FROM \"public\".\"UserUpdateData\"\n          WHERE \"userId\" = NEW.\"updatedByUserId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_update_public_MainWeapon_updatedByUserId_into_oplog\n  AFTER UPDATE ON \"public\".\"MainWeapon\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_update_public_MainWeapon_updatedByUserId_into_oplog_function();",
        "INSERT INTO \"public\".\"_electric_trigger_settings\" (\"namespace\", \"tablename\", \"flag\")\n  VALUES ('public', 'SubWeapon', 1)\n  ON CONFLICT DO NOTHING;",
        "DROP TRIGGER IF EXISTS update_ensure_public_SubWeapon_primarykey ON \"public\".\"SubWeapon\";",
        "CREATE OR REPLACE FUNCTION update_ensure_public_SubWeapon_primarykey_function()\nRETURNS TRIGGER AS $$\nBEGIN\n  IF OLD.\"id\" IS DISTINCT FROM NEW.\"id\" THEN\n    RAISE EXCEPTION 'Cannot change the value of column id as it belongs to the primary key';\n  END IF;\n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;",
        "CREATE TRIGGER update_ensure_public_SubWeapon_primarykey\n  BEFORE UPDATE ON \"public\".\"SubWeapon\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_ensure_public_SubWeapon_primarykey_function();",
        "DROP TRIGGER IF EXISTS insert_public_SubWeapon_into_oplog ON \"public\".\"SubWeapon\";",
        "    CREATE OR REPLACE FUNCTION insert_public_SubWeapon_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'SubWeapon';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'SubWeapon',\n            'INSERT',\n            json_strip_nulls(json_build_object('id', new.\"id\")),\n            jsonb_build_object('baseAtk', new.\"baseAtk\", 'createdAt', new.\"createdAt\", 'createdByUserId', new.\"createdByUserId\", 'dataSources', new.\"dataSources\", 'element', new.\"element\", 'extraDetails', new.\"extraDetails\", 'id', new.\"id\", 'modifiersListId', new.\"modifiersListId\", 'name', new.\"name\", 'refinement', new.\"refinement\", 'stability', new.\"stability\", 'statisticsId', new.\"statisticsId\", 'subWeaponType', new.\"subWeaponType\", 'updatedAt', new.\"updatedAt\", 'updatedByUserId', new.\"updatedByUserId\"),\n            NULL,\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER insert_public_SubWeapon_into_oplog\n  AFTER INSERT ON \"public\".\"SubWeapon\"\n    FOR EACH ROW\n      EXECUTE FUNCTION insert_public_SubWeapon_into_oplog_function();",
        "DROP TRIGGER IF EXISTS update_public_SubWeapon_into_oplog ON \"public\".\"SubWeapon\";",
        "    CREATE OR REPLACE FUNCTION update_public_SubWeapon_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'SubWeapon';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'SubWeapon',\n            'UPDATE',\n            json_strip_nulls(json_build_object('id', new.\"id\")),\n            jsonb_build_object('baseAtk', new.\"baseAtk\", 'createdAt', new.\"createdAt\", 'createdByUserId', new.\"createdByUserId\", 'dataSources', new.\"dataSources\", 'element', new.\"element\", 'extraDetails', new.\"extraDetails\", 'id', new.\"id\", 'modifiersListId', new.\"modifiersListId\", 'name', new.\"name\", 'refinement', new.\"refinement\", 'stability', new.\"stability\", 'statisticsId', new.\"statisticsId\", 'subWeaponType', new.\"subWeaponType\", 'updatedAt', new.\"updatedAt\", 'updatedByUserId', new.\"updatedByUserId\"),\n            jsonb_build_object('baseAtk', old.\"baseAtk\", 'createdAt', old.\"createdAt\", 'createdByUserId', old.\"createdByUserId\", 'dataSources', old.\"dataSources\", 'element', old.\"element\", 'extraDetails', old.\"extraDetails\", 'id', old.\"id\", 'modifiersListId', old.\"modifiersListId\", 'name', old.\"name\", 'refinement', old.\"refinement\", 'stability', old.\"stability\", 'statisticsId', old.\"statisticsId\", 'subWeaponType', old.\"subWeaponType\", 'updatedAt', old.\"updatedAt\", 'updatedByUserId', old.\"updatedByUserId\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER update_public_SubWeapon_into_oplog\n  AFTER UPDATE ON \"public\".\"SubWeapon\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_public_SubWeapon_into_oplog_function();",
        "DROP TRIGGER IF EXISTS delete_public_SubWeapon_into_oplog ON \"public\".\"SubWeapon\";",
        "    CREATE OR REPLACE FUNCTION delete_public_SubWeapon_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'SubWeapon';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'SubWeapon',\n            'DELETE',\n            json_strip_nulls(json_build_object('id', old.\"id\")),\n            NULL,\n            jsonb_build_object('baseAtk', old.\"baseAtk\", 'createdAt', old.\"createdAt\", 'createdByUserId', old.\"createdByUserId\", 'dataSources', old.\"dataSources\", 'element', old.\"element\", 'extraDetails', old.\"extraDetails\", 'id', old.\"id\", 'modifiersListId', old.\"modifiersListId\", 'name', old.\"name\", 'refinement', old.\"refinement\", 'stability', old.\"stability\", 'statisticsId', old.\"statisticsId\", 'subWeaponType', old.\"subWeaponType\", 'updatedAt', old.\"updatedAt\", 'updatedByUserId', old.\"updatedByUserId\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER delete_public_SubWeapon_into_oplog\n  AFTER DELETE ON \"public\".\"SubWeapon\"\n    FOR EACH ROW\n      EXECUTE FUNCTION delete_public_SubWeapon_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_insert_public_SubWeapon_createdByUserId_into_oplog ON \"public\".\"SubWeapon\";",
        "    CREATE OR REPLACE FUNCTION compensation_insert_public_SubWeapon_createdByUserId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'SubWeapon';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'UserCreateData',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('userId', \"userId\"))),\n            jsonb_build_object('userId', \"userId\"),\n            NULL,\n            NULL\n          FROM \"public\".\"UserCreateData\"\n          WHERE \"userId\" = NEW.\"createdByUserId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_insert_public_SubWeapon_createdByUserId_into_oplog\n  AFTER INSERT ON \"public\".\"SubWeapon\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_insert_public_SubWeapon_createdByUserId_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_update_public_SubWeapon_createdByUserId_into_oplog ON \"public\".\"SubWeapon\";",
        "    CREATE OR REPLACE FUNCTION compensation_update_public_SubWeapon_createdByUserId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'SubWeapon';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'UserCreateData',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('userId', \"userId\"))),\n            jsonb_build_object('userId', \"userId\"),\n            NULL,\n            NULL\n          FROM \"public\".\"UserCreateData\"\n          WHERE \"userId\" = NEW.\"createdByUserId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_update_public_SubWeapon_createdByUserId_into_oplog\n  AFTER UPDATE ON \"public\".\"SubWeapon\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_update_public_SubWeapon_createdByUserId_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_insert_public_SubWeapon_modifiersListId_into_oplog ON \"public\".\"SubWeapon\";",
        "    CREATE OR REPLACE FUNCTION compensation_insert_public_SubWeapon_modifiersListId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'SubWeapon';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'ModifiersList',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"ModifiersList\"\n          WHERE \"id\" = NEW.\"modifiersListId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_insert_public_SubWeapon_modifiersListId_into_oplog\n  AFTER INSERT ON \"public\".\"SubWeapon\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_insert_public_SubWeapon_modifiersListId_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_update_public_SubWeapon_modifiersListId_into_oplog ON \"public\".\"SubWeapon\";",
        "    CREATE OR REPLACE FUNCTION compensation_update_public_SubWeapon_modifiersListId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'SubWeapon';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'ModifiersList',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"ModifiersList\"\n          WHERE \"id\" = NEW.\"modifiersListId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_update_public_SubWeapon_modifiersListId_into_oplog\n  AFTER UPDATE ON \"public\".\"SubWeapon\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_update_public_SubWeapon_modifiersListId_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_insert_public_SubWeapon_updatedByUserId_into_oplog ON \"public\".\"SubWeapon\";",
        "    CREATE OR REPLACE FUNCTION compensation_insert_public_SubWeapon_updatedByUserId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'SubWeapon';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'UserUpdateData',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('userId', \"userId\"))),\n            jsonb_build_object('userId', \"userId\"),\n            NULL,\n            NULL\n          FROM \"public\".\"UserUpdateData\"\n          WHERE \"userId\" = NEW.\"updatedByUserId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_insert_public_SubWeapon_updatedByUserId_into_oplog\n  AFTER INSERT ON \"public\".\"SubWeapon\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_insert_public_SubWeapon_updatedByUserId_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_update_public_SubWeapon_updatedByUserId_into_oplog ON \"public\".\"SubWeapon\";",
        "    CREATE OR REPLACE FUNCTION compensation_update_public_SubWeapon_updatedByUserId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'SubWeapon';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'UserUpdateData',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('userId', \"userId\"))),\n            jsonb_build_object('userId', \"userId\"),\n            NULL,\n            NULL\n          FROM \"public\".\"UserUpdateData\"\n          WHERE \"userId\" = NEW.\"updatedByUserId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_update_public_SubWeapon_updatedByUserId_into_oplog\n  AFTER UPDATE ON \"public\".\"SubWeapon\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_update_public_SubWeapon_updatedByUserId_into_oplog_function();",
        "INSERT INTO \"public\".\"_electric_trigger_settings\" (\"namespace\", \"tablename\", \"flag\")\n  VALUES ('public', 'BodyArmor', 1)\n  ON CONFLICT DO NOTHING;",
        "DROP TRIGGER IF EXISTS update_ensure_public_BodyArmor_primarykey ON \"public\".\"BodyArmor\";",
        "CREATE OR REPLACE FUNCTION update_ensure_public_BodyArmor_primarykey_function()\nRETURNS TRIGGER AS $$\nBEGIN\n  IF OLD.\"id\" IS DISTINCT FROM NEW.\"id\" THEN\n    RAISE EXCEPTION 'Cannot change the value of column id as it belongs to the primary key';\n  END IF;\n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;",
        "CREATE TRIGGER update_ensure_public_BodyArmor_primarykey\n  BEFORE UPDATE ON \"public\".\"BodyArmor\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_ensure_public_BodyArmor_primarykey_function();",
        "DROP TRIGGER IF EXISTS insert_public_BodyArmor_into_oplog ON \"public\".\"BodyArmor\";",
        "    CREATE OR REPLACE FUNCTION insert_public_BodyArmor_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'BodyArmor';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'BodyArmor',\n            'INSERT',\n            json_strip_nulls(json_build_object('id', new.\"id\")),\n            jsonb_build_object('baseDef', new.\"baseDef\", 'bodyArmorType', new.\"bodyArmorType\", 'createdAt', new.\"createdAt\", 'createdByUserId', new.\"createdByUserId\", 'dataSources', new.\"dataSources\", 'extraDetails', new.\"extraDetails\", 'id', new.\"id\", 'modifiersListId', new.\"modifiersListId\", 'name', new.\"name\", 'refinement', new.\"refinement\", 'statisticsId', new.\"statisticsId\", 'updatedAt', new.\"updatedAt\", 'updatedByUserId', new.\"updatedByUserId\"),\n            NULL,\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER insert_public_BodyArmor_into_oplog\n  AFTER INSERT ON \"public\".\"BodyArmor\"\n    FOR EACH ROW\n      EXECUTE FUNCTION insert_public_BodyArmor_into_oplog_function();",
        "DROP TRIGGER IF EXISTS update_public_BodyArmor_into_oplog ON \"public\".\"BodyArmor\";",
        "    CREATE OR REPLACE FUNCTION update_public_BodyArmor_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'BodyArmor';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'BodyArmor',\n            'UPDATE',\n            json_strip_nulls(json_build_object('id', new.\"id\")),\n            jsonb_build_object('baseDef', new.\"baseDef\", 'bodyArmorType', new.\"bodyArmorType\", 'createdAt', new.\"createdAt\", 'createdByUserId', new.\"createdByUserId\", 'dataSources', new.\"dataSources\", 'extraDetails', new.\"extraDetails\", 'id', new.\"id\", 'modifiersListId', new.\"modifiersListId\", 'name', new.\"name\", 'refinement', new.\"refinement\", 'statisticsId', new.\"statisticsId\", 'updatedAt', new.\"updatedAt\", 'updatedByUserId', new.\"updatedByUserId\"),\n            jsonb_build_object('baseDef', old.\"baseDef\", 'bodyArmorType', old.\"bodyArmorType\", 'createdAt', old.\"createdAt\", 'createdByUserId', old.\"createdByUserId\", 'dataSources', old.\"dataSources\", 'extraDetails', old.\"extraDetails\", 'id', old.\"id\", 'modifiersListId', old.\"modifiersListId\", 'name', old.\"name\", 'refinement', old.\"refinement\", 'statisticsId', old.\"statisticsId\", 'updatedAt', old.\"updatedAt\", 'updatedByUserId', old.\"updatedByUserId\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER update_public_BodyArmor_into_oplog\n  AFTER UPDATE ON \"public\".\"BodyArmor\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_public_BodyArmor_into_oplog_function();",
        "DROP TRIGGER IF EXISTS delete_public_BodyArmor_into_oplog ON \"public\".\"BodyArmor\";",
        "    CREATE OR REPLACE FUNCTION delete_public_BodyArmor_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'BodyArmor';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'BodyArmor',\n            'DELETE',\n            json_strip_nulls(json_build_object('id', old.\"id\")),\n            NULL,\n            jsonb_build_object('baseDef', old.\"baseDef\", 'bodyArmorType', old.\"bodyArmorType\", 'createdAt', old.\"createdAt\", 'createdByUserId', old.\"createdByUserId\", 'dataSources', old.\"dataSources\", 'extraDetails', old.\"extraDetails\", 'id', old.\"id\", 'modifiersListId', old.\"modifiersListId\", 'name', old.\"name\", 'refinement', old.\"refinement\", 'statisticsId', old.\"statisticsId\", 'updatedAt', old.\"updatedAt\", 'updatedByUserId', old.\"updatedByUserId\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER delete_public_BodyArmor_into_oplog\n  AFTER DELETE ON \"public\".\"BodyArmor\"\n    FOR EACH ROW\n      EXECUTE FUNCTION delete_public_BodyArmor_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_insert_public_BodyArmor_createdByUserId_into_oplog ON \"public\".\"BodyArmor\";",
        "    CREATE OR REPLACE FUNCTION compensation_insert_public_BodyArmor_createdByUserId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'BodyArmor';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'UserCreateData',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('userId', \"userId\"))),\n            jsonb_build_object('userId', \"userId\"),\n            NULL,\n            NULL\n          FROM \"public\".\"UserCreateData\"\n          WHERE \"userId\" = NEW.\"createdByUserId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_insert_public_BodyArmor_createdByUserId_into_oplog\n  AFTER INSERT ON \"public\".\"BodyArmor\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_insert_public_BodyArmor_createdByUserId_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_update_public_BodyArmor_createdByUserId_into_oplog ON \"public\".\"BodyArmor\";",
        "    CREATE OR REPLACE FUNCTION compensation_update_public_BodyArmor_createdByUserId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'BodyArmor';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'UserCreateData',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('userId', \"userId\"))),\n            jsonb_build_object('userId', \"userId\"),\n            NULL,\n            NULL\n          FROM \"public\".\"UserCreateData\"\n          WHERE \"userId\" = NEW.\"createdByUserId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_update_public_BodyArmor_createdByUserId_into_oplog\n  AFTER UPDATE ON \"public\".\"BodyArmor\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_update_public_BodyArmor_createdByUserId_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_insert_public_BodyArmor_modifiersListId_into_oplog ON \"public\".\"BodyArmor\";",
        "    CREATE OR REPLACE FUNCTION compensation_insert_public_BodyArmor_modifiersListId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'BodyArmor';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'ModifiersList',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"ModifiersList\"\n          WHERE \"id\" = NEW.\"modifiersListId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_insert_public_BodyArmor_modifiersListId_into_oplog\n  AFTER INSERT ON \"public\".\"BodyArmor\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_insert_public_BodyArmor_modifiersListId_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_update_public_BodyArmor_modifiersListId_into_oplog ON \"public\".\"BodyArmor\";",
        "    CREATE OR REPLACE FUNCTION compensation_update_public_BodyArmor_modifiersListId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'BodyArmor';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'ModifiersList',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"ModifiersList\"\n          WHERE \"id\" = NEW.\"modifiersListId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_update_public_BodyArmor_modifiersListId_into_oplog\n  AFTER UPDATE ON \"public\".\"BodyArmor\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_update_public_BodyArmor_modifiersListId_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_insert_public_BodyArmor_updatedByUserId_into_oplog ON \"public\".\"BodyArmor\";",
        "    CREATE OR REPLACE FUNCTION compensation_insert_public_BodyArmor_updatedByUserId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'BodyArmor';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'UserUpdateData',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('userId', \"userId\"))),\n            jsonb_build_object('userId', \"userId\"),\n            NULL,\n            NULL\n          FROM \"public\".\"UserUpdateData\"\n          WHERE \"userId\" = NEW.\"updatedByUserId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_insert_public_BodyArmor_updatedByUserId_into_oplog\n  AFTER INSERT ON \"public\".\"BodyArmor\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_insert_public_BodyArmor_updatedByUserId_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_update_public_BodyArmor_updatedByUserId_into_oplog ON \"public\".\"BodyArmor\";",
        "    CREATE OR REPLACE FUNCTION compensation_update_public_BodyArmor_updatedByUserId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'BodyArmor';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'UserUpdateData',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('userId', \"userId\"))),\n            jsonb_build_object('userId', \"userId\"),\n            NULL,\n            NULL\n          FROM \"public\".\"UserUpdateData\"\n          WHERE \"userId\" = NEW.\"updatedByUserId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_update_public_BodyArmor_updatedByUserId_into_oplog\n  AFTER UPDATE ON \"public\".\"BodyArmor\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_update_public_BodyArmor_updatedByUserId_into_oplog_function();",
        "INSERT INTO \"public\".\"_electric_trigger_settings\" (\"namespace\", \"tablename\", \"flag\")\n  VALUES ('public', 'AdditionalEquipment', 1)\n  ON CONFLICT DO NOTHING;",
        "DROP TRIGGER IF EXISTS update_ensure_public_AdditionalEquipment_primarykey ON \"public\".\"AdditionalEquipment\";",
        "CREATE OR REPLACE FUNCTION update_ensure_public_AdditionalEquipment_primarykey_function()\nRETURNS TRIGGER AS $$\nBEGIN\n  IF OLD.\"id\" IS DISTINCT FROM NEW.\"id\" THEN\n    RAISE EXCEPTION 'Cannot change the value of column id as it belongs to the primary key';\n  END IF;\n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;",
        "CREATE TRIGGER update_ensure_public_AdditionalEquipment_primarykey\n  BEFORE UPDATE ON \"public\".\"AdditionalEquipment\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_ensure_public_AdditionalEquipment_primarykey_function();",
        "DROP TRIGGER IF EXISTS insert_public_AdditionalEquipment_into_oplog ON \"public\".\"AdditionalEquipment\";",
        "    CREATE OR REPLACE FUNCTION insert_public_AdditionalEquipment_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'AdditionalEquipment';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'AdditionalEquipment',\n            'INSERT',\n            json_strip_nulls(json_build_object('id', new.\"id\")),\n            jsonb_build_object('createdAt', new.\"createdAt\", 'createdByUserId', new.\"createdByUserId\", 'dataSources', new.\"dataSources\", 'extraDetails', new.\"extraDetails\", 'id', new.\"id\", 'modifiersListId', new.\"modifiersListId\", 'name', new.\"name\", 'refinement', new.\"refinement\", 'statisticsId', new.\"statisticsId\", 'updatedAt', new.\"updatedAt\", 'updatedByUserId', new.\"updatedByUserId\"),\n            NULL,\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER insert_public_AdditionalEquipment_into_oplog\n  AFTER INSERT ON \"public\".\"AdditionalEquipment\"\n    FOR EACH ROW\n      EXECUTE FUNCTION insert_public_AdditionalEquipment_into_oplog_function();",
        "DROP TRIGGER IF EXISTS update_public_AdditionalEquipment_into_oplog ON \"public\".\"AdditionalEquipment\";",
        "    CREATE OR REPLACE FUNCTION update_public_AdditionalEquipment_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'AdditionalEquipment';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'AdditionalEquipment',\n            'UPDATE',\n            json_strip_nulls(json_build_object('id', new.\"id\")),\n            jsonb_build_object('createdAt', new.\"createdAt\", 'createdByUserId', new.\"createdByUserId\", 'dataSources', new.\"dataSources\", 'extraDetails', new.\"extraDetails\", 'id', new.\"id\", 'modifiersListId', new.\"modifiersListId\", 'name', new.\"name\", 'refinement', new.\"refinement\", 'statisticsId', new.\"statisticsId\", 'updatedAt', new.\"updatedAt\", 'updatedByUserId', new.\"updatedByUserId\"),\n            jsonb_build_object('createdAt', old.\"createdAt\", 'createdByUserId', old.\"createdByUserId\", 'dataSources', old.\"dataSources\", 'extraDetails', old.\"extraDetails\", 'id', old.\"id\", 'modifiersListId', old.\"modifiersListId\", 'name', old.\"name\", 'refinement', old.\"refinement\", 'statisticsId', old.\"statisticsId\", 'updatedAt', old.\"updatedAt\", 'updatedByUserId', old.\"updatedByUserId\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER update_public_AdditionalEquipment_into_oplog\n  AFTER UPDATE ON \"public\".\"AdditionalEquipment\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_public_AdditionalEquipment_into_oplog_function();",
        "DROP TRIGGER IF EXISTS delete_public_AdditionalEquipment_into_oplog ON \"public\".\"AdditionalEquipment\";",
        "    CREATE OR REPLACE FUNCTION delete_public_AdditionalEquipment_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'AdditionalEquipment';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'AdditionalEquipment',\n            'DELETE',\n            json_strip_nulls(json_build_object('id', old.\"id\")),\n            NULL,\n            jsonb_build_object('createdAt', old.\"createdAt\", 'createdByUserId', old.\"createdByUserId\", 'dataSources', old.\"dataSources\", 'extraDetails', old.\"extraDetails\", 'id', old.\"id\", 'modifiersListId', old.\"modifiersListId\", 'name', old.\"name\", 'refinement', old.\"refinement\", 'statisticsId', old.\"statisticsId\", 'updatedAt', old.\"updatedAt\", 'updatedByUserId', old.\"updatedByUserId\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER delete_public_AdditionalEquipment_into_oplog\n  AFTER DELETE ON \"public\".\"AdditionalEquipment\"\n    FOR EACH ROW\n      EXECUTE FUNCTION delete_public_AdditionalEquipment_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_insert_public_AdditionalEquipment_createdByUserId_into_oplog ON \"public\".\"AdditionalEquipment\";",
        "    CREATE OR REPLACE FUNCTION compensation_insert_public_AdditionalEquipment_createdByUserId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'AdditionalEquipment';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'UserCreateData',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('userId', \"userId\"))),\n            jsonb_build_object('userId', \"userId\"),\n            NULL,\n            NULL\n          FROM \"public\".\"UserCreateData\"\n          WHERE \"userId\" = NEW.\"createdByUserId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_insert_public_AdditionalEquipment_createdByUserId_into_oplog\n  AFTER INSERT ON \"public\".\"AdditionalEquipment\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_insert_public_AdditionalEquipment_createdByUserId_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_update_public_AdditionalEquipment_createdByUserId_into_oplog ON \"public\".\"AdditionalEquipment\";",
        "    CREATE OR REPLACE FUNCTION compensation_update_public_AdditionalEquipment_createdByUserId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'AdditionalEquipment';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'UserCreateData',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('userId', \"userId\"))),\n            jsonb_build_object('userId', \"userId\"),\n            NULL,\n            NULL\n          FROM \"public\".\"UserCreateData\"\n          WHERE \"userId\" = NEW.\"createdByUserId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_update_public_AdditionalEquipment_createdByUserId_into_oplog\n  AFTER UPDATE ON \"public\".\"AdditionalEquipment\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_update_public_AdditionalEquipment_createdByUserId_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_insert_public_AdditionalEquipment_modifiersListId_into_oplog ON \"public\".\"AdditionalEquipment\";",
        "    CREATE OR REPLACE FUNCTION compensation_insert_public_AdditionalEquipment_modifiersListId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'AdditionalEquipment';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'ModifiersList',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"ModifiersList\"\n          WHERE \"id\" = NEW.\"modifiersListId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_insert_public_AdditionalEquipment_modifiersListId_into_oplog\n  AFTER INSERT ON \"public\".\"AdditionalEquipment\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_insert_public_AdditionalEquipment_modifiersListId_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_update_public_AdditionalEquipment_modifiersListId_into_oplog ON \"public\".\"AdditionalEquipment\";",
        "    CREATE OR REPLACE FUNCTION compensation_update_public_AdditionalEquipment_modifiersListId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'AdditionalEquipment';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'ModifiersList',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"ModifiersList\"\n          WHERE \"id\" = NEW.\"modifiersListId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_update_public_AdditionalEquipment_modifiersListId_into_oplog\n  AFTER UPDATE ON \"public\".\"AdditionalEquipment\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_update_public_AdditionalEquipment_modifiersListId_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_insert_public_AdditionalEquipment_updatedByUserId_into_oplog ON \"public\".\"AdditionalEquipment\";",
        "    CREATE OR REPLACE FUNCTION compensation_insert_public_AdditionalEquipment_updatedByUserId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'AdditionalEquipment';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'UserUpdateData',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('userId', \"userId\"))),\n            jsonb_build_object('userId', \"userId\"),\n            NULL,\n            NULL\n          FROM \"public\".\"UserUpdateData\"\n          WHERE \"userId\" = NEW.\"updatedByUserId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_insert_public_AdditionalEquipment_updatedByUserId_into_oplog\n  AFTER INSERT ON \"public\".\"AdditionalEquipment\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_insert_public_AdditionalEquipment_updatedByUserId_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_update_public_AdditionalEquipment_updatedByUserId_into_oplog ON \"public\".\"AdditionalEquipment\";",
        "    CREATE OR REPLACE FUNCTION compensation_update_public_AdditionalEquipment_updatedByUserId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'AdditionalEquipment';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'UserUpdateData',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('userId', \"userId\"))),\n            jsonb_build_object('userId', \"userId\"),\n            NULL,\n            NULL\n          FROM \"public\".\"UserUpdateData\"\n          WHERE \"userId\" = NEW.\"updatedByUserId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_update_public_AdditionalEquipment_updatedByUserId_into_oplog\n  AFTER UPDATE ON \"public\".\"AdditionalEquipment\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_update_public_AdditionalEquipment_updatedByUserId_into_oplog_function();",
        "INSERT INTO \"public\".\"_electric_trigger_settings\" (\"namespace\", \"tablename\", \"flag\")\n  VALUES ('public', 'SpecialEquipment', 1)\n  ON CONFLICT DO NOTHING;",
        "DROP TRIGGER IF EXISTS update_ensure_public_SpecialEquipment_primarykey ON \"public\".\"SpecialEquipment\";",
        "CREATE OR REPLACE FUNCTION update_ensure_public_SpecialEquipment_primarykey_function()\nRETURNS TRIGGER AS $$\nBEGIN\n  IF OLD.\"id\" IS DISTINCT FROM NEW.\"id\" THEN\n    RAISE EXCEPTION 'Cannot change the value of column id as it belongs to the primary key';\n  END IF;\n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;",
        "CREATE TRIGGER update_ensure_public_SpecialEquipment_primarykey\n  BEFORE UPDATE ON \"public\".\"SpecialEquipment\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_ensure_public_SpecialEquipment_primarykey_function();",
        "DROP TRIGGER IF EXISTS insert_public_SpecialEquipment_into_oplog ON \"public\".\"SpecialEquipment\";",
        "    CREATE OR REPLACE FUNCTION insert_public_SpecialEquipment_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'SpecialEquipment';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'SpecialEquipment',\n            'INSERT',\n            json_strip_nulls(json_build_object('id', new.\"id\")),\n            jsonb_build_object('createdAt', new.\"createdAt\", 'createdByUserId', new.\"createdByUserId\", 'dataSources', new.\"dataSources\", 'extraDetails', new.\"extraDetails\", 'id', new.\"id\", 'modifiersListId', new.\"modifiersListId\", 'name', new.\"name\", 'statisticsId', new.\"statisticsId\", 'updatedAt', new.\"updatedAt\", 'updatedByUserId', new.\"updatedByUserId\"),\n            NULL,\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER insert_public_SpecialEquipment_into_oplog\n  AFTER INSERT ON \"public\".\"SpecialEquipment\"\n    FOR EACH ROW\n      EXECUTE FUNCTION insert_public_SpecialEquipment_into_oplog_function();",
        "DROP TRIGGER IF EXISTS update_public_SpecialEquipment_into_oplog ON \"public\".\"SpecialEquipment\";",
        "    CREATE OR REPLACE FUNCTION update_public_SpecialEquipment_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'SpecialEquipment';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'SpecialEquipment',\n            'UPDATE',\n            json_strip_nulls(json_build_object('id', new.\"id\")),\n            jsonb_build_object('createdAt', new.\"createdAt\", 'createdByUserId', new.\"createdByUserId\", 'dataSources', new.\"dataSources\", 'extraDetails', new.\"extraDetails\", 'id', new.\"id\", 'modifiersListId', new.\"modifiersListId\", 'name', new.\"name\", 'statisticsId', new.\"statisticsId\", 'updatedAt', new.\"updatedAt\", 'updatedByUserId', new.\"updatedByUserId\"),\n            jsonb_build_object('createdAt', old.\"createdAt\", 'createdByUserId', old.\"createdByUserId\", 'dataSources', old.\"dataSources\", 'extraDetails', old.\"extraDetails\", 'id', old.\"id\", 'modifiersListId', old.\"modifiersListId\", 'name', old.\"name\", 'statisticsId', old.\"statisticsId\", 'updatedAt', old.\"updatedAt\", 'updatedByUserId', old.\"updatedByUserId\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER update_public_SpecialEquipment_into_oplog\n  AFTER UPDATE ON \"public\".\"SpecialEquipment\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_public_SpecialEquipment_into_oplog_function();",
        "DROP TRIGGER IF EXISTS delete_public_SpecialEquipment_into_oplog ON \"public\".\"SpecialEquipment\";",
        "    CREATE OR REPLACE FUNCTION delete_public_SpecialEquipment_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'SpecialEquipment';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'SpecialEquipment',\n            'DELETE',\n            json_strip_nulls(json_build_object('id', old.\"id\")),\n            NULL,\n            jsonb_build_object('createdAt', old.\"createdAt\", 'createdByUserId', old.\"createdByUserId\", 'dataSources', old.\"dataSources\", 'extraDetails', old.\"extraDetails\", 'id', old.\"id\", 'modifiersListId', old.\"modifiersListId\", 'name', old.\"name\", 'statisticsId', old.\"statisticsId\", 'updatedAt', old.\"updatedAt\", 'updatedByUserId', old.\"updatedByUserId\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER delete_public_SpecialEquipment_into_oplog\n  AFTER DELETE ON \"public\".\"SpecialEquipment\"\n    FOR EACH ROW\n      EXECUTE FUNCTION delete_public_SpecialEquipment_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_insert_public_SpecialEquipment_createdByUserId_into_oplog ON \"public\".\"SpecialEquipment\";",
        "    CREATE OR REPLACE FUNCTION compensation_insert_public_SpecialEquipment_createdByUserId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'SpecialEquipment';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'UserCreateData',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('userId', \"userId\"))),\n            jsonb_build_object('userId', \"userId\"),\n            NULL,\n            NULL\n          FROM \"public\".\"UserCreateData\"\n          WHERE \"userId\" = NEW.\"createdByUserId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_insert_public_SpecialEquipment_createdByUserId_into_oplog\n  AFTER INSERT ON \"public\".\"SpecialEquipment\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_insert_public_SpecialEquipment_createdByUserId_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_update_public_SpecialEquipment_createdByUserId_into_oplog ON \"public\".\"SpecialEquipment\";",
        "    CREATE OR REPLACE FUNCTION compensation_update_public_SpecialEquipment_createdByUserId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'SpecialEquipment';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'UserCreateData',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('userId', \"userId\"))),\n            jsonb_build_object('userId', \"userId\"),\n            NULL,\n            NULL\n          FROM \"public\".\"UserCreateData\"\n          WHERE \"userId\" = NEW.\"createdByUserId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_update_public_SpecialEquipment_createdByUserId_into_oplog\n  AFTER UPDATE ON \"public\".\"SpecialEquipment\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_update_public_SpecialEquipment_createdByUserId_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_insert_public_SpecialEquipment_modifiersListId_into_oplog ON \"public\".\"SpecialEquipment\";",
        "    CREATE OR REPLACE FUNCTION compensation_insert_public_SpecialEquipment_modifiersListId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'SpecialEquipment';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'ModifiersList',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"ModifiersList\"\n          WHERE \"id\" = NEW.\"modifiersListId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_insert_public_SpecialEquipment_modifiersListId_into_oplog\n  AFTER INSERT ON \"public\".\"SpecialEquipment\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_insert_public_SpecialEquipment_modifiersListId_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_update_public_SpecialEquipment_modifiersListId_into_oplog ON \"public\".\"SpecialEquipment\";",
        "    CREATE OR REPLACE FUNCTION compensation_update_public_SpecialEquipment_modifiersListId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'SpecialEquipment';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'ModifiersList',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"ModifiersList\"\n          WHERE \"id\" = NEW.\"modifiersListId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_update_public_SpecialEquipment_modifiersListId_into_oplog\n  AFTER UPDATE ON \"public\".\"SpecialEquipment\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_update_public_SpecialEquipment_modifiersListId_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_insert_public_SpecialEquipment_updatedByUserId_into_oplog ON \"public\".\"SpecialEquipment\";",
        "    CREATE OR REPLACE FUNCTION compensation_insert_public_SpecialEquipment_updatedByUserId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'SpecialEquipment';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'UserUpdateData',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('userId', \"userId\"))),\n            jsonb_build_object('userId', \"userId\"),\n            NULL,\n            NULL\n          FROM \"public\".\"UserUpdateData\"\n          WHERE \"userId\" = NEW.\"updatedByUserId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_insert_public_SpecialEquipment_updatedByUserId_into_oplog\n  AFTER INSERT ON \"public\".\"SpecialEquipment\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_insert_public_SpecialEquipment_updatedByUserId_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_update_public_SpecialEquipment_updatedByUserId_into_oplog ON \"public\".\"SpecialEquipment\";",
        "    CREATE OR REPLACE FUNCTION compensation_update_public_SpecialEquipment_updatedByUserId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'SpecialEquipment';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'UserUpdateData',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('userId', \"userId\"))),\n            jsonb_build_object('userId', \"userId\"),\n            NULL,\n            NULL\n          FROM \"public\".\"UserUpdateData\"\n          WHERE \"userId\" = NEW.\"updatedByUserId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_update_public_SpecialEquipment_updatedByUserId_into_oplog\n  AFTER UPDATE ON \"public\".\"SpecialEquipment\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_update_public_SpecialEquipment_updatedByUserId_into_oplog_function();",
        "INSERT INTO \"public\".\"_electric_trigger_settings\" (\"namespace\", \"tablename\", \"flag\")\n  VALUES ('public', 'Skill', 1)\n  ON CONFLICT DO NOTHING;",
        "DROP TRIGGER IF EXISTS update_ensure_public_Skill_primarykey ON \"public\".\"Skill\";",
        "CREATE OR REPLACE FUNCTION update_ensure_public_Skill_primarykey_function()\nRETURNS TRIGGER AS $$\nBEGIN\n  IF OLD.\"id\" IS DISTINCT FROM NEW.\"id\" THEN\n    RAISE EXCEPTION 'Cannot change the value of column id as it belongs to the primary key';\n  END IF;\n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;",
        "CREATE TRIGGER update_ensure_public_Skill_primarykey\n  BEFORE UPDATE ON \"public\".\"Skill\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_ensure_public_Skill_primarykey_function();",
        "DROP TRIGGER IF EXISTS insert_public_Skill_into_oplog ON \"public\".\"Skill\";",
        "    CREATE OR REPLACE FUNCTION insert_public_Skill_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Skill';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'Skill',\n            'INSERT',\n            json_strip_nulls(json_build_object('id', new.\"id\")),\n            jsonb_build_object('createdAt', new.\"createdAt\", 'createdByUserId', new.\"createdByUserId\", 'dataSources', new.\"dataSources\", 'element', new.\"element\", 'extraDetails', new.\"extraDetails\", 'id', new.\"id\", 'name', new.\"name\", 'skillDescription', new.\"skillDescription\", 'skillTreeName', new.\"skillTreeName\", 'skillType', new.\"skillType\", 'statisticsId', new.\"statisticsId\", 'updatedAt', new.\"updatedAt\", 'updatedByUserId', new.\"updatedByUserId\", 'weaponElementDependencyType', new.\"weaponElementDependencyType\"),\n            NULL,\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER insert_public_Skill_into_oplog\n  AFTER INSERT ON \"public\".\"Skill\"\n    FOR EACH ROW\n      EXECUTE FUNCTION insert_public_Skill_into_oplog_function();",
        "DROP TRIGGER IF EXISTS update_public_Skill_into_oplog ON \"public\".\"Skill\";",
        "    CREATE OR REPLACE FUNCTION update_public_Skill_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Skill';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'Skill',\n            'UPDATE',\n            json_strip_nulls(json_build_object('id', new.\"id\")),\n            jsonb_build_object('createdAt', new.\"createdAt\", 'createdByUserId', new.\"createdByUserId\", 'dataSources', new.\"dataSources\", 'element', new.\"element\", 'extraDetails', new.\"extraDetails\", 'id', new.\"id\", 'name', new.\"name\", 'skillDescription', new.\"skillDescription\", 'skillTreeName', new.\"skillTreeName\", 'skillType', new.\"skillType\", 'statisticsId', new.\"statisticsId\", 'updatedAt', new.\"updatedAt\", 'updatedByUserId', new.\"updatedByUserId\", 'weaponElementDependencyType', new.\"weaponElementDependencyType\"),\n            jsonb_build_object('createdAt', old.\"createdAt\", 'createdByUserId', old.\"createdByUserId\", 'dataSources', old.\"dataSources\", 'element', old.\"element\", 'extraDetails', old.\"extraDetails\", 'id', old.\"id\", 'name', old.\"name\", 'skillDescription', old.\"skillDescription\", 'skillTreeName', old.\"skillTreeName\", 'skillType', old.\"skillType\", 'statisticsId', old.\"statisticsId\", 'updatedAt', old.\"updatedAt\", 'updatedByUserId', old.\"updatedByUserId\", 'weaponElementDependencyType', old.\"weaponElementDependencyType\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER update_public_Skill_into_oplog\n  AFTER UPDATE ON \"public\".\"Skill\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_public_Skill_into_oplog_function();",
        "DROP TRIGGER IF EXISTS delete_public_Skill_into_oplog ON \"public\".\"Skill\";",
        "    CREATE OR REPLACE FUNCTION delete_public_Skill_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Skill';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'Skill',\n            'DELETE',\n            json_strip_nulls(json_build_object('id', old.\"id\")),\n            NULL,\n            jsonb_build_object('createdAt', old.\"createdAt\", 'createdByUserId', old.\"createdByUserId\", 'dataSources', old.\"dataSources\", 'element', old.\"element\", 'extraDetails', old.\"extraDetails\", 'id', old.\"id\", 'name', old.\"name\", 'skillDescription', old.\"skillDescription\", 'skillTreeName', old.\"skillTreeName\", 'skillType', old.\"skillType\", 'statisticsId', old.\"statisticsId\", 'updatedAt', old.\"updatedAt\", 'updatedByUserId', old.\"updatedByUserId\", 'weaponElementDependencyType', old.\"weaponElementDependencyType\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER delete_public_Skill_into_oplog\n  AFTER DELETE ON \"public\".\"Skill\"\n    FOR EACH ROW\n      EXECUTE FUNCTION delete_public_Skill_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_insert_public_Skill_createdByUserId_into_oplog ON \"public\".\"Skill\";",
        "    CREATE OR REPLACE FUNCTION compensation_insert_public_Skill_createdByUserId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Skill';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'UserCreateData',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('userId', \"userId\"))),\n            jsonb_build_object('userId', \"userId\"),\n            NULL,\n            NULL\n          FROM \"public\".\"UserCreateData\"\n          WHERE \"userId\" = NEW.\"createdByUserId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_insert_public_Skill_createdByUserId_into_oplog\n  AFTER INSERT ON \"public\".\"Skill\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_insert_public_Skill_createdByUserId_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_update_public_Skill_createdByUserId_into_oplog ON \"public\".\"Skill\";",
        "    CREATE OR REPLACE FUNCTION compensation_update_public_Skill_createdByUserId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Skill';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'UserCreateData',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('userId', \"userId\"))),\n            jsonb_build_object('userId', \"userId\"),\n            NULL,\n            NULL\n          FROM \"public\".\"UserCreateData\"\n          WHERE \"userId\" = NEW.\"createdByUserId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_update_public_Skill_createdByUserId_into_oplog\n  AFTER UPDATE ON \"public\".\"Skill\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_update_public_Skill_createdByUserId_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_insert_public_Skill_updatedByUserId_into_oplog ON \"public\".\"Skill\";",
        "    CREATE OR REPLACE FUNCTION compensation_insert_public_Skill_updatedByUserId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Skill';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'UserUpdateData',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('userId', \"userId\"))),\n            jsonb_build_object('userId', \"userId\"),\n            NULL,\n            NULL\n          FROM \"public\".\"UserUpdateData\"\n          WHERE \"userId\" = NEW.\"updatedByUserId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_insert_public_Skill_updatedByUserId_into_oplog\n  AFTER INSERT ON \"public\".\"Skill\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_insert_public_Skill_updatedByUserId_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_update_public_Skill_updatedByUserId_into_oplog ON \"public\".\"Skill\";",
        "    CREATE OR REPLACE FUNCTION compensation_update_public_Skill_updatedByUserId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Skill';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'UserUpdateData',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('userId', \"userId\"))),\n            jsonb_build_object('userId', \"userId\"),\n            NULL,\n            NULL\n          FROM \"public\".\"UserUpdateData\"\n          WHERE \"userId\" = NEW.\"updatedByUserId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_update_public_Skill_updatedByUserId_into_oplog\n  AFTER UPDATE ON \"public\".\"Skill\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_update_public_Skill_updatedByUserId_into_oplog_function();",
        "INSERT INTO \"public\".\"_electric_trigger_settings\" (\"namespace\", \"tablename\", \"flag\")\n  VALUES ('public', 'SkillEffect', 1)\n  ON CONFLICT DO NOTHING;",
        "DROP TRIGGER IF EXISTS update_ensure_public_SkillEffect_primarykey ON \"public\".\"SkillEffect\";",
        "CREATE OR REPLACE FUNCTION update_ensure_public_SkillEffect_primarykey_function()\nRETURNS TRIGGER AS $$\nBEGIN\n  IF OLD.\"id\" IS DISTINCT FROM NEW.\"id\" THEN\n    RAISE EXCEPTION 'Cannot change the value of column id as it belongs to the primary key';\n  END IF;\n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;",
        "CREATE TRIGGER update_ensure_public_SkillEffect_primarykey\n  BEFORE UPDATE ON \"public\".\"SkillEffect\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_ensure_public_SkillEffect_primarykey_function();",
        "DROP TRIGGER IF EXISTS insert_public_SkillEffect_into_oplog ON \"public\".\"SkillEffect\";",
        "    CREATE OR REPLACE FUNCTION insert_public_SkillEffect_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'SkillEffect';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'SkillEffect',\n            'INSERT',\n            json_strip_nulls(json_build_object('id', new.\"id\")),\n            jsonb_build_object('actionBaseDurationFormula', new.\"actionBaseDurationFormula\", 'actionModifiableDurationFormula', new.\"actionModifiableDurationFormula\", 'belongToskillId', new.\"belongToskillId\", 'chantingBaseDurationFormula', new.\"chantingBaseDurationFormula\", 'chantingModifiableDurationFormula', new.\"chantingModifiableDurationFormula\", 'chargingBaseDurationFormula', new.\"chargingBaseDurationFormula\", 'chargingModifiableDurationFormula', new.\"chargingModifiableDurationFormula\", 'condition', new.\"condition\", 'description', new.\"description\", 'id', new.\"id\", 'skillExtraActionType', new.\"skillExtraActionType\", 'skillStartupFramesFormula', new.\"skillStartupFramesFormula\"),\n            NULL,\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER insert_public_SkillEffect_into_oplog\n  AFTER INSERT ON \"public\".\"SkillEffect\"\n    FOR EACH ROW\n      EXECUTE FUNCTION insert_public_SkillEffect_into_oplog_function();",
        "DROP TRIGGER IF EXISTS update_public_SkillEffect_into_oplog ON \"public\".\"SkillEffect\";",
        "    CREATE OR REPLACE FUNCTION update_public_SkillEffect_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'SkillEffect';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'SkillEffect',\n            'UPDATE',\n            json_strip_nulls(json_build_object('id', new.\"id\")),\n            jsonb_build_object('actionBaseDurationFormula', new.\"actionBaseDurationFormula\", 'actionModifiableDurationFormula', new.\"actionModifiableDurationFormula\", 'belongToskillId', new.\"belongToskillId\", 'chantingBaseDurationFormula', new.\"chantingBaseDurationFormula\", 'chantingModifiableDurationFormula', new.\"chantingModifiableDurationFormula\", 'chargingBaseDurationFormula', new.\"chargingBaseDurationFormula\", 'chargingModifiableDurationFormula', new.\"chargingModifiableDurationFormula\", 'condition', new.\"condition\", 'description', new.\"description\", 'id', new.\"id\", 'skillExtraActionType', new.\"skillExtraActionType\", 'skillStartupFramesFormula', new.\"skillStartupFramesFormula\"),\n            jsonb_build_object('actionBaseDurationFormula', old.\"actionBaseDurationFormula\", 'actionModifiableDurationFormula', old.\"actionModifiableDurationFormula\", 'belongToskillId', old.\"belongToskillId\", 'chantingBaseDurationFormula', old.\"chantingBaseDurationFormula\", 'chantingModifiableDurationFormula', old.\"chantingModifiableDurationFormula\", 'chargingBaseDurationFormula', old.\"chargingBaseDurationFormula\", 'chargingModifiableDurationFormula', old.\"chargingModifiableDurationFormula\", 'condition', old.\"condition\", 'description', old.\"description\", 'id', old.\"id\", 'skillExtraActionType', old.\"skillExtraActionType\", 'skillStartupFramesFormula', old.\"skillStartupFramesFormula\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER update_public_SkillEffect_into_oplog\n  AFTER UPDATE ON \"public\".\"SkillEffect\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_public_SkillEffect_into_oplog_function();",
        "DROP TRIGGER IF EXISTS delete_public_SkillEffect_into_oplog ON \"public\".\"SkillEffect\";",
        "    CREATE OR REPLACE FUNCTION delete_public_SkillEffect_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'SkillEffect';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'SkillEffect',\n            'DELETE',\n            json_strip_nulls(json_build_object('id', old.\"id\")),\n            NULL,\n            jsonb_build_object('actionBaseDurationFormula', old.\"actionBaseDurationFormula\", 'actionModifiableDurationFormula', old.\"actionModifiableDurationFormula\", 'belongToskillId', old.\"belongToskillId\", 'chantingBaseDurationFormula', old.\"chantingBaseDurationFormula\", 'chantingModifiableDurationFormula', old.\"chantingModifiableDurationFormula\", 'chargingBaseDurationFormula', old.\"chargingBaseDurationFormula\", 'chargingModifiableDurationFormula', old.\"chargingModifiableDurationFormula\", 'condition', old.\"condition\", 'description', old.\"description\", 'id', old.\"id\", 'skillExtraActionType', old.\"skillExtraActionType\", 'skillStartupFramesFormula', old.\"skillStartupFramesFormula\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER delete_public_SkillEffect_into_oplog\n  AFTER DELETE ON \"public\".\"SkillEffect\"\n    FOR EACH ROW\n      EXECUTE FUNCTION delete_public_SkillEffect_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_insert_public_SkillEffect_belongToskillId_into_oplog ON \"public\".\"SkillEffect\";",
        "    CREATE OR REPLACE FUNCTION compensation_insert_public_SkillEffect_belongToskillId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'SkillEffect';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'Skill',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"Skill\"\n          WHERE \"id\" = NEW.\"belongToskillId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_insert_public_SkillEffect_belongToskillId_into_oplog\n  AFTER INSERT ON \"public\".\"SkillEffect\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_insert_public_SkillEffect_belongToskillId_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_update_public_SkillEffect_belongToskillId_into_oplog ON \"public\".\"SkillEffect\";",
        "    CREATE OR REPLACE FUNCTION compensation_update_public_SkillEffect_belongToskillId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'SkillEffect';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'Skill',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"Skill\"\n          WHERE \"id\" = NEW.\"belongToskillId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_update_public_SkillEffect_belongToskillId_into_oplog\n  AFTER UPDATE ON \"public\".\"SkillEffect\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_update_public_SkillEffect_belongToskillId_into_oplog_function();",
        "INSERT INTO \"public\".\"_electric_trigger_settings\" (\"namespace\", \"tablename\", \"flag\")\n  VALUES ('public', 'SkillCost', 1)\n  ON CONFLICT DO NOTHING;",
        "DROP TRIGGER IF EXISTS update_ensure_public_SkillCost_primarykey ON \"public\".\"SkillCost\";",
        "CREATE OR REPLACE FUNCTION update_ensure_public_SkillCost_primarykey_function()\nRETURNS TRIGGER AS $$\nBEGIN\n  IF OLD.\"id\" IS DISTINCT FROM NEW.\"id\" THEN\n    RAISE EXCEPTION 'Cannot change the value of column id as it belongs to the primary key';\n  END IF;\n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;",
        "CREATE TRIGGER update_ensure_public_SkillCost_primarykey\n  BEFORE UPDATE ON \"public\".\"SkillCost\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_ensure_public_SkillCost_primarykey_function();",
        "DROP TRIGGER IF EXISTS insert_public_SkillCost_into_oplog ON \"public\".\"SkillCost\";",
        "    CREATE OR REPLACE FUNCTION insert_public_SkillCost_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'SkillCost';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'SkillCost',\n            'INSERT',\n            json_strip_nulls(json_build_object('id', new.\"id\")),\n            jsonb_build_object('costFormula', new.\"costFormula\", 'id', new.\"id\", 'name', new.\"name\", 'skillEffectId', new.\"skillEffectId\"),\n            NULL,\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER insert_public_SkillCost_into_oplog\n  AFTER INSERT ON \"public\".\"SkillCost\"\n    FOR EACH ROW\n      EXECUTE FUNCTION insert_public_SkillCost_into_oplog_function();",
        "DROP TRIGGER IF EXISTS update_public_SkillCost_into_oplog ON \"public\".\"SkillCost\";",
        "    CREATE OR REPLACE FUNCTION update_public_SkillCost_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'SkillCost';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'SkillCost',\n            'UPDATE',\n            json_strip_nulls(json_build_object('id', new.\"id\")),\n            jsonb_build_object('costFormula', new.\"costFormula\", 'id', new.\"id\", 'name', new.\"name\", 'skillEffectId', new.\"skillEffectId\"),\n            jsonb_build_object('costFormula', old.\"costFormula\", 'id', old.\"id\", 'name', old.\"name\", 'skillEffectId', old.\"skillEffectId\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER update_public_SkillCost_into_oplog\n  AFTER UPDATE ON \"public\".\"SkillCost\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_public_SkillCost_into_oplog_function();",
        "DROP TRIGGER IF EXISTS delete_public_SkillCost_into_oplog ON \"public\".\"SkillCost\";",
        "    CREATE OR REPLACE FUNCTION delete_public_SkillCost_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'SkillCost';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'SkillCost',\n            'DELETE',\n            json_strip_nulls(json_build_object('id', old.\"id\")),\n            NULL,\n            jsonb_build_object('costFormula', old.\"costFormula\", 'id', old.\"id\", 'name', old.\"name\", 'skillEffectId', old.\"skillEffectId\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER delete_public_SkillCost_into_oplog\n  AFTER DELETE ON \"public\".\"SkillCost\"\n    FOR EACH ROW\n      EXECUTE FUNCTION delete_public_SkillCost_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_insert_public_SkillCost_skillEffectId_into_oplog ON \"public\".\"SkillCost\";",
        "    CREATE OR REPLACE FUNCTION compensation_insert_public_SkillCost_skillEffectId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'SkillCost';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'SkillEffect',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"SkillEffect\"\n          WHERE \"id\" = NEW.\"skillEffectId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_insert_public_SkillCost_skillEffectId_into_oplog\n  AFTER INSERT ON \"public\".\"SkillCost\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_insert_public_SkillCost_skillEffectId_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_update_public_SkillCost_skillEffectId_into_oplog ON \"public\".\"SkillCost\";",
        "    CREATE OR REPLACE FUNCTION compensation_update_public_SkillCost_skillEffectId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'SkillCost';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'SkillEffect',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"SkillEffect\"\n          WHERE \"id\" = NEW.\"skillEffectId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_update_public_SkillCost_skillEffectId_into_oplog\n  AFTER UPDATE ON \"public\".\"SkillCost\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_update_public_SkillCost_skillEffectId_into_oplog_function();",
        "INSERT INTO \"public\".\"_electric_trigger_settings\" (\"namespace\", \"tablename\", \"flag\")\n  VALUES ('public', 'SkillYield', 1)\n  ON CONFLICT DO NOTHING;",
        "DROP TRIGGER IF EXISTS update_ensure_public_SkillYield_primarykey ON \"public\".\"SkillYield\";",
        "CREATE OR REPLACE FUNCTION update_ensure_public_SkillYield_primarykey_function()\nRETURNS TRIGGER AS $$\nBEGIN\n  IF OLD.\"id\" IS DISTINCT FROM NEW.\"id\" THEN\n    RAISE EXCEPTION 'Cannot change the value of column id as it belongs to the primary key';\n  END IF;\n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;",
        "CREATE TRIGGER update_ensure_public_SkillYield_primarykey\n  BEFORE UPDATE ON \"public\".\"SkillYield\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_ensure_public_SkillYield_primarykey_function();",
        "DROP TRIGGER IF EXISTS insert_public_SkillYield_into_oplog ON \"public\".\"SkillYield\";",
        "    CREATE OR REPLACE FUNCTION insert_public_SkillYield_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'SkillYield';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'SkillYield',\n            'INSERT',\n            json_strip_nulls(json_build_object('id', new.\"id\")),\n            jsonb_build_object('id', new.\"id\", 'mutationTimingFormula', new.\"mutationTimingFormula\", 'name', new.\"name\", 'skillEffectId', new.\"skillEffectId\", 'yieldFormula', new.\"yieldFormula\", 'yieldType', new.\"yieldType\"),\n            NULL,\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER insert_public_SkillYield_into_oplog\n  AFTER INSERT ON \"public\".\"SkillYield\"\n    FOR EACH ROW\n      EXECUTE FUNCTION insert_public_SkillYield_into_oplog_function();",
        "DROP TRIGGER IF EXISTS update_public_SkillYield_into_oplog ON \"public\".\"SkillYield\";",
        "    CREATE OR REPLACE FUNCTION update_public_SkillYield_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'SkillYield';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'SkillYield',\n            'UPDATE',\n            json_strip_nulls(json_build_object('id', new.\"id\")),\n            jsonb_build_object('id', new.\"id\", 'mutationTimingFormula', new.\"mutationTimingFormula\", 'name', new.\"name\", 'skillEffectId', new.\"skillEffectId\", 'yieldFormula', new.\"yieldFormula\", 'yieldType', new.\"yieldType\"),\n            jsonb_build_object('id', old.\"id\", 'mutationTimingFormula', old.\"mutationTimingFormula\", 'name', old.\"name\", 'skillEffectId', old.\"skillEffectId\", 'yieldFormula', old.\"yieldFormula\", 'yieldType', old.\"yieldType\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER update_public_SkillYield_into_oplog\n  AFTER UPDATE ON \"public\".\"SkillYield\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_public_SkillYield_into_oplog_function();",
        "DROP TRIGGER IF EXISTS delete_public_SkillYield_into_oplog ON \"public\".\"SkillYield\";",
        "    CREATE OR REPLACE FUNCTION delete_public_SkillYield_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'SkillYield';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'SkillYield',\n            'DELETE',\n            json_strip_nulls(json_build_object('id', old.\"id\")),\n            NULL,\n            jsonb_build_object('id', old.\"id\", 'mutationTimingFormula', old.\"mutationTimingFormula\", 'name', old.\"name\", 'skillEffectId', old.\"skillEffectId\", 'yieldFormula', old.\"yieldFormula\", 'yieldType', old.\"yieldType\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER delete_public_SkillYield_into_oplog\n  AFTER DELETE ON \"public\".\"SkillYield\"\n    FOR EACH ROW\n      EXECUTE FUNCTION delete_public_SkillYield_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_insert_public_SkillYield_skillEffectId_into_oplog ON \"public\".\"SkillYield\";",
        "    CREATE OR REPLACE FUNCTION compensation_insert_public_SkillYield_skillEffectId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'SkillYield';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'SkillEffect',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"SkillEffect\"\n          WHERE \"id\" = NEW.\"skillEffectId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_insert_public_SkillYield_skillEffectId_into_oplog\n  AFTER INSERT ON \"public\".\"SkillYield\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_insert_public_SkillYield_skillEffectId_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_update_public_SkillYield_skillEffectId_into_oplog ON \"public\".\"SkillYield\";",
        "    CREATE OR REPLACE FUNCTION compensation_update_public_SkillYield_skillEffectId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'SkillYield';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'SkillEffect',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"SkillEffect\"\n          WHERE \"id\" = NEW.\"skillEffectId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_update_public_SkillYield_skillEffectId_into_oplog\n  AFTER UPDATE ON \"public\".\"SkillYield\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_update_public_SkillYield_skillEffectId_into_oplog_function();",
        "INSERT INTO \"public\".\"_electric_trigger_settings\" (\"namespace\", \"tablename\", \"flag\")\n  VALUES ('public', 'Pet', 1)\n  ON CONFLICT DO NOTHING;",
        "DROP TRIGGER IF EXISTS update_ensure_public_Pet_primarykey ON \"public\".\"Pet\";",
        "CREATE OR REPLACE FUNCTION update_ensure_public_Pet_primarykey_function()\nRETURNS TRIGGER AS $$\nBEGIN\n  IF OLD.\"id\" IS DISTINCT FROM NEW.\"id\" THEN\n    RAISE EXCEPTION 'Cannot change the value of column id as it belongs to the primary key';\n  END IF;\n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;",
        "CREATE TRIGGER update_ensure_public_Pet_primarykey\n  BEFORE UPDATE ON \"public\".\"Pet\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_ensure_public_Pet_primarykey_function();",
        "DROP TRIGGER IF EXISTS insert_public_Pet_into_oplog ON \"public\".\"Pet\";",
        "    CREATE OR REPLACE FUNCTION insert_public_Pet_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Pet';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'Pet',\n            'INSERT',\n            json_strip_nulls(json_build_object('id', new.\"id\")),\n            jsonb_build_object('createdAt', new.\"createdAt\", 'createdByUserId', new.\"createdByUserId\", 'dataSources', new.\"dataSources\", 'extraDetails', new.\"extraDetails\", 'id', new.\"id\", 'name', new.\"name\", 'statisticsId', new.\"statisticsId\", 'updatedAt', new.\"updatedAt\", 'updatedByUserId', new.\"updatedByUserId\"),\n            NULL,\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER insert_public_Pet_into_oplog\n  AFTER INSERT ON \"public\".\"Pet\"\n    FOR EACH ROW\n      EXECUTE FUNCTION insert_public_Pet_into_oplog_function();",
        "DROP TRIGGER IF EXISTS update_public_Pet_into_oplog ON \"public\".\"Pet\";",
        "    CREATE OR REPLACE FUNCTION update_public_Pet_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Pet';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'Pet',\n            'UPDATE',\n            json_strip_nulls(json_build_object('id', new.\"id\")),\n            jsonb_build_object('createdAt', new.\"createdAt\", 'createdByUserId', new.\"createdByUserId\", 'dataSources', new.\"dataSources\", 'extraDetails', new.\"extraDetails\", 'id', new.\"id\", 'name', new.\"name\", 'statisticsId', new.\"statisticsId\", 'updatedAt', new.\"updatedAt\", 'updatedByUserId', new.\"updatedByUserId\"),\n            jsonb_build_object('createdAt', old.\"createdAt\", 'createdByUserId', old.\"createdByUserId\", 'dataSources', old.\"dataSources\", 'extraDetails', old.\"extraDetails\", 'id', old.\"id\", 'name', old.\"name\", 'statisticsId', old.\"statisticsId\", 'updatedAt', old.\"updatedAt\", 'updatedByUserId', old.\"updatedByUserId\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER update_public_Pet_into_oplog\n  AFTER UPDATE ON \"public\".\"Pet\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_public_Pet_into_oplog_function();",
        "DROP TRIGGER IF EXISTS delete_public_Pet_into_oplog ON \"public\".\"Pet\";",
        "    CREATE OR REPLACE FUNCTION delete_public_Pet_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Pet';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'Pet',\n            'DELETE',\n            json_strip_nulls(json_build_object('id', old.\"id\")),\n            NULL,\n            jsonb_build_object('createdAt', old.\"createdAt\", 'createdByUserId', old.\"createdByUserId\", 'dataSources', old.\"dataSources\", 'extraDetails', old.\"extraDetails\", 'id', old.\"id\", 'name', old.\"name\", 'statisticsId', old.\"statisticsId\", 'updatedAt', old.\"updatedAt\", 'updatedByUserId', old.\"updatedByUserId\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER delete_public_Pet_into_oplog\n  AFTER DELETE ON \"public\".\"Pet\"\n    FOR EACH ROW\n      EXECUTE FUNCTION delete_public_Pet_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_insert_public_Pet_createdByUserId_into_oplog ON \"public\".\"Pet\";",
        "    CREATE OR REPLACE FUNCTION compensation_insert_public_Pet_createdByUserId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Pet';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'UserCreateData',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('userId', \"userId\"))),\n            jsonb_build_object('userId', \"userId\"),\n            NULL,\n            NULL\n          FROM \"public\".\"UserCreateData\"\n          WHERE \"userId\" = NEW.\"createdByUserId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_insert_public_Pet_createdByUserId_into_oplog\n  AFTER INSERT ON \"public\".\"Pet\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_insert_public_Pet_createdByUserId_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_update_public_Pet_createdByUserId_into_oplog ON \"public\".\"Pet\";",
        "    CREATE OR REPLACE FUNCTION compensation_update_public_Pet_createdByUserId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Pet';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'UserCreateData',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('userId', \"userId\"))),\n            jsonb_build_object('userId', \"userId\"),\n            NULL,\n            NULL\n          FROM \"public\".\"UserCreateData\"\n          WHERE \"userId\" = NEW.\"createdByUserId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_update_public_Pet_createdByUserId_into_oplog\n  AFTER UPDATE ON \"public\".\"Pet\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_update_public_Pet_createdByUserId_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_insert_public_Pet_updatedByUserId_into_oplog ON \"public\".\"Pet\";",
        "    CREATE OR REPLACE FUNCTION compensation_insert_public_Pet_updatedByUserId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Pet';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'UserUpdateData',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('userId', \"userId\"))),\n            jsonb_build_object('userId', \"userId\"),\n            NULL,\n            NULL\n          FROM \"public\".\"UserUpdateData\"\n          WHERE \"userId\" = NEW.\"updatedByUserId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_insert_public_Pet_updatedByUserId_into_oplog\n  AFTER INSERT ON \"public\".\"Pet\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_insert_public_Pet_updatedByUserId_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_update_public_Pet_updatedByUserId_into_oplog ON \"public\".\"Pet\";",
        "    CREATE OR REPLACE FUNCTION compensation_update_public_Pet_updatedByUserId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Pet';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'UserUpdateData',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('userId', \"userId\"))),\n            jsonb_build_object('userId', \"userId\"),\n            NULL,\n            NULL\n          FROM \"public\".\"UserUpdateData\"\n          WHERE \"userId\" = NEW.\"updatedByUserId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_update_public_Pet_updatedByUserId_into_oplog\n  AFTER UPDATE ON \"public\".\"Pet\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_update_public_Pet_updatedByUserId_into_oplog_function();",
        "INSERT INTO \"public\".\"_electric_trigger_settings\" (\"namespace\", \"tablename\", \"flag\")\n  VALUES ('public', 'Consumable', 1)\n  ON CONFLICT DO NOTHING;",
        "DROP TRIGGER IF EXISTS update_ensure_public_Consumable_primarykey ON \"public\".\"Consumable\";",
        "CREATE OR REPLACE FUNCTION update_ensure_public_Consumable_primarykey_function()\nRETURNS TRIGGER AS $$\nBEGIN\n  IF OLD.\"id\" IS DISTINCT FROM NEW.\"id\" THEN\n    RAISE EXCEPTION 'Cannot change the value of column id as it belongs to the primary key';\n  END IF;\n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;",
        "CREATE TRIGGER update_ensure_public_Consumable_primarykey\n  BEFORE UPDATE ON \"public\".\"Consumable\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_ensure_public_Consumable_primarykey_function();",
        "DROP TRIGGER IF EXISTS insert_public_Consumable_into_oplog ON \"public\".\"Consumable\";",
        "    CREATE OR REPLACE FUNCTION insert_public_Consumable_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Consumable';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'Consumable',\n            'INSERT',\n            json_strip_nulls(json_build_object('id', new.\"id\")),\n            jsonb_build_object('createdAt', new.\"createdAt\", 'createdByUserId', new.\"createdByUserId\", 'dataSources', new.\"dataSources\", 'extraDetails', new.\"extraDetails\", 'id', new.\"id\", 'modifiersListId', new.\"modifiersListId\", 'name', new.\"name\", 'statisticsId', new.\"statisticsId\", 'updatedAt', new.\"updatedAt\", 'updatedByUserId', new.\"updatedByUserId\"),\n            NULL,\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER insert_public_Consumable_into_oplog\n  AFTER INSERT ON \"public\".\"Consumable\"\n    FOR EACH ROW\n      EXECUTE FUNCTION insert_public_Consumable_into_oplog_function();",
        "DROP TRIGGER IF EXISTS update_public_Consumable_into_oplog ON \"public\".\"Consumable\";",
        "    CREATE OR REPLACE FUNCTION update_public_Consumable_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Consumable';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'Consumable',\n            'UPDATE',\n            json_strip_nulls(json_build_object('id', new.\"id\")),\n            jsonb_build_object('createdAt', new.\"createdAt\", 'createdByUserId', new.\"createdByUserId\", 'dataSources', new.\"dataSources\", 'extraDetails', new.\"extraDetails\", 'id', new.\"id\", 'modifiersListId', new.\"modifiersListId\", 'name', new.\"name\", 'statisticsId', new.\"statisticsId\", 'updatedAt', new.\"updatedAt\", 'updatedByUserId', new.\"updatedByUserId\"),\n            jsonb_build_object('createdAt', old.\"createdAt\", 'createdByUserId', old.\"createdByUserId\", 'dataSources', old.\"dataSources\", 'extraDetails', old.\"extraDetails\", 'id', old.\"id\", 'modifiersListId', old.\"modifiersListId\", 'name', old.\"name\", 'statisticsId', old.\"statisticsId\", 'updatedAt', old.\"updatedAt\", 'updatedByUserId', old.\"updatedByUserId\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER update_public_Consumable_into_oplog\n  AFTER UPDATE ON \"public\".\"Consumable\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_public_Consumable_into_oplog_function();",
        "DROP TRIGGER IF EXISTS delete_public_Consumable_into_oplog ON \"public\".\"Consumable\";",
        "    CREATE OR REPLACE FUNCTION delete_public_Consumable_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Consumable';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'Consumable',\n            'DELETE',\n            json_strip_nulls(json_build_object('id', old.\"id\")),\n            NULL,\n            jsonb_build_object('createdAt', old.\"createdAt\", 'createdByUserId', old.\"createdByUserId\", 'dataSources', old.\"dataSources\", 'extraDetails', old.\"extraDetails\", 'id', old.\"id\", 'modifiersListId', old.\"modifiersListId\", 'name', old.\"name\", 'statisticsId', old.\"statisticsId\", 'updatedAt', old.\"updatedAt\", 'updatedByUserId', old.\"updatedByUserId\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER delete_public_Consumable_into_oplog\n  AFTER DELETE ON \"public\".\"Consumable\"\n    FOR EACH ROW\n      EXECUTE FUNCTION delete_public_Consumable_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_insert_public_Consumable_createdByUserId_into_oplog ON \"public\".\"Consumable\";",
        "    CREATE OR REPLACE FUNCTION compensation_insert_public_Consumable_createdByUserId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Consumable';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'UserCreateData',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('userId', \"userId\"))),\n            jsonb_build_object('userId', \"userId\"),\n            NULL,\n            NULL\n          FROM \"public\".\"UserCreateData\"\n          WHERE \"userId\" = NEW.\"createdByUserId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_insert_public_Consumable_createdByUserId_into_oplog\n  AFTER INSERT ON \"public\".\"Consumable\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_insert_public_Consumable_createdByUserId_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_update_public_Consumable_createdByUserId_into_oplog ON \"public\".\"Consumable\";",
        "    CREATE OR REPLACE FUNCTION compensation_update_public_Consumable_createdByUserId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Consumable';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'UserCreateData',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('userId', \"userId\"))),\n            jsonb_build_object('userId', \"userId\"),\n            NULL,\n            NULL\n          FROM \"public\".\"UserCreateData\"\n          WHERE \"userId\" = NEW.\"createdByUserId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_update_public_Consumable_createdByUserId_into_oplog\n  AFTER UPDATE ON \"public\".\"Consumable\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_update_public_Consumable_createdByUserId_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_insert_public_Consumable_modifiersListId_into_oplog ON \"public\".\"Consumable\";",
        "    CREATE OR REPLACE FUNCTION compensation_insert_public_Consumable_modifiersListId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Consumable';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'ModifiersList',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"ModifiersList\"\n          WHERE \"id\" = NEW.\"modifiersListId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_insert_public_Consumable_modifiersListId_into_oplog\n  AFTER INSERT ON \"public\".\"Consumable\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_insert_public_Consumable_modifiersListId_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_update_public_Consumable_modifiersListId_into_oplog ON \"public\".\"Consumable\";",
        "    CREATE OR REPLACE FUNCTION compensation_update_public_Consumable_modifiersListId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Consumable';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'ModifiersList',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"ModifiersList\"\n          WHERE \"id\" = NEW.\"modifiersListId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_update_public_Consumable_modifiersListId_into_oplog\n  AFTER UPDATE ON \"public\".\"Consumable\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_update_public_Consumable_modifiersListId_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_insert_public_Consumable_updatedByUserId_into_oplog ON \"public\".\"Consumable\";",
        "    CREATE OR REPLACE FUNCTION compensation_insert_public_Consumable_updatedByUserId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Consumable';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'UserUpdateData',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('userId', \"userId\"))),\n            jsonb_build_object('userId', \"userId\"),\n            NULL,\n            NULL\n          FROM \"public\".\"UserUpdateData\"\n          WHERE \"userId\" = NEW.\"updatedByUserId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_insert_public_Consumable_updatedByUserId_into_oplog\n  AFTER INSERT ON \"public\".\"Consumable\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_insert_public_Consumable_updatedByUserId_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_update_public_Consumable_updatedByUserId_into_oplog ON \"public\".\"Consumable\";",
        "    CREATE OR REPLACE FUNCTION compensation_update_public_Consumable_updatedByUserId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Consumable';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'UserUpdateData',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('userId', \"userId\"))),\n            jsonb_build_object('userId', \"userId\"),\n            NULL,\n            NULL\n          FROM \"public\".\"UserUpdateData\"\n          WHERE \"userId\" = NEW.\"updatedByUserId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_update_public_Consumable_updatedByUserId_into_oplog\n  AFTER UPDATE ON \"public\".\"Consumable\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_update_public_Consumable_updatedByUserId_into_oplog_function();",
        "INSERT INTO \"public\".\"_electric_trigger_settings\" (\"namespace\", \"tablename\", \"flag\")\n  VALUES ('public', 'Analyzer', 1)\n  ON CONFLICT DO NOTHING;",
        "DROP TRIGGER IF EXISTS update_ensure_public_Analyzer_primarykey ON \"public\".\"Analyzer\";",
        "CREATE OR REPLACE FUNCTION update_ensure_public_Analyzer_primarykey_function()\nRETURNS TRIGGER AS $$\nBEGIN\n  IF OLD.\"id\" IS DISTINCT FROM NEW.\"id\" THEN\n    RAISE EXCEPTION 'Cannot change the value of column id as it belongs to the primary key';\n  END IF;\n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;",
        "CREATE TRIGGER update_ensure_public_Analyzer_primarykey\n  BEFORE UPDATE ON \"public\".\"Analyzer\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_ensure_public_Analyzer_primarykey_function();",
        "DROP TRIGGER IF EXISTS insert_public_Analyzer_into_oplog ON \"public\".\"Analyzer\";",
        "    CREATE OR REPLACE FUNCTION insert_public_Analyzer_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Analyzer';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'Analyzer',\n            'INSERT',\n            json_strip_nulls(json_build_object('id', new.\"id\")),\n            jsonb_build_object('characterId', new.\"characterId\", 'createdAt', new.\"createdAt\", 'createdByUserId', new.\"createdByUserId\", 'extraDetails', new.\"extraDetails\", 'id', new.\"id\", 'monsterId', new.\"monsterId\", 'name', new.\"name\", 'statisticsId', new.\"statisticsId\", 'updatedAt', new.\"updatedAt\", 'updatedByUserId', new.\"updatedByUserId\"),\n            NULL,\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER insert_public_Analyzer_into_oplog\n  AFTER INSERT ON \"public\".\"Analyzer\"\n    FOR EACH ROW\n      EXECUTE FUNCTION insert_public_Analyzer_into_oplog_function();",
        "DROP TRIGGER IF EXISTS update_public_Analyzer_into_oplog ON \"public\".\"Analyzer\";",
        "    CREATE OR REPLACE FUNCTION update_public_Analyzer_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Analyzer';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'Analyzer',\n            'UPDATE',\n            json_strip_nulls(json_build_object('id', new.\"id\")),\n            jsonb_build_object('characterId', new.\"characterId\", 'createdAt', new.\"createdAt\", 'createdByUserId', new.\"createdByUserId\", 'extraDetails', new.\"extraDetails\", 'id', new.\"id\", 'monsterId', new.\"monsterId\", 'name', new.\"name\", 'statisticsId', new.\"statisticsId\", 'updatedAt', new.\"updatedAt\", 'updatedByUserId', new.\"updatedByUserId\"),\n            jsonb_build_object('characterId', old.\"characterId\", 'createdAt', old.\"createdAt\", 'createdByUserId', old.\"createdByUserId\", 'extraDetails', old.\"extraDetails\", 'id', old.\"id\", 'monsterId', old.\"monsterId\", 'name', old.\"name\", 'statisticsId', old.\"statisticsId\", 'updatedAt', old.\"updatedAt\", 'updatedByUserId', old.\"updatedByUserId\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER update_public_Analyzer_into_oplog\n  AFTER UPDATE ON \"public\".\"Analyzer\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_public_Analyzer_into_oplog_function();",
        "DROP TRIGGER IF EXISTS delete_public_Analyzer_into_oplog ON \"public\".\"Analyzer\";",
        "    CREATE OR REPLACE FUNCTION delete_public_Analyzer_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Analyzer';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'Analyzer',\n            'DELETE',\n            json_strip_nulls(json_build_object('id', old.\"id\")),\n            NULL,\n            jsonb_build_object('characterId', old.\"characterId\", 'createdAt', old.\"createdAt\", 'createdByUserId', old.\"createdByUserId\", 'extraDetails', old.\"extraDetails\", 'id', old.\"id\", 'monsterId', old.\"monsterId\", 'name', old.\"name\", 'statisticsId', old.\"statisticsId\", 'updatedAt', old.\"updatedAt\", 'updatedByUserId', old.\"updatedByUserId\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER delete_public_Analyzer_into_oplog\n  AFTER DELETE ON \"public\".\"Analyzer\"\n    FOR EACH ROW\n      EXECUTE FUNCTION delete_public_Analyzer_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_insert_public_Analyzer_characterId_into_oplog ON \"public\".\"Analyzer\";",
        "    CREATE OR REPLACE FUNCTION compensation_insert_public_Analyzer_characterId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Analyzer';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'Character',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"Character\"\n          WHERE \"id\" = NEW.\"characterId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_insert_public_Analyzer_characterId_into_oplog\n  AFTER INSERT ON \"public\".\"Analyzer\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_insert_public_Analyzer_characterId_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_update_public_Analyzer_characterId_into_oplog ON \"public\".\"Analyzer\";",
        "    CREATE OR REPLACE FUNCTION compensation_update_public_Analyzer_characterId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Analyzer';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'Character',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"Character\"\n          WHERE \"id\" = NEW.\"characterId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_update_public_Analyzer_characterId_into_oplog\n  AFTER UPDATE ON \"public\".\"Analyzer\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_update_public_Analyzer_characterId_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_insert_public_Analyzer_createdByUserId_into_oplog ON \"public\".\"Analyzer\";",
        "    CREATE OR REPLACE FUNCTION compensation_insert_public_Analyzer_createdByUserId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Analyzer';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'UserCreateData',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('userId', \"userId\"))),\n            jsonb_build_object('userId', \"userId\"),\n            NULL,\n            NULL\n          FROM \"public\".\"UserCreateData\"\n          WHERE \"userId\" = NEW.\"createdByUserId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_insert_public_Analyzer_createdByUserId_into_oplog\n  AFTER INSERT ON \"public\".\"Analyzer\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_insert_public_Analyzer_createdByUserId_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_update_public_Analyzer_createdByUserId_into_oplog ON \"public\".\"Analyzer\";",
        "    CREATE OR REPLACE FUNCTION compensation_update_public_Analyzer_createdByUserId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Analyzer';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'UserCreateData',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('userId', \"userId\"))),\n            jsonb_build_object('userId', \"userId\"),\n            NULL,\n            NULL\n          FROM \"public\".\"UserCreateData\"\n          WHERE \"userId\" = NEW.\"createdByUserId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_update_public_Analyzer_createdByUserId_into_oplog\n  AFTER UPDATE ON \"public\".\"Analyzer\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_update_public_Analyzer_createdByUserId_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_insert_public_Analyzer_monsterId_into_oplog ON \"public\".\"Analyzer\";",
        "    CREATE OR REPLACE FUNCTION compensation_insert_public_Analyzer_monsterId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Analyzer';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'Monster',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"Monster\"\n          WHERE \"id\" = NEW.\"monsterId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_insert_public_Analyzer_monsterId_into_oplog\n  AFTER INSERT ON \"public\".\"Analyzer\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_insert_public_Analyzer_monsterId_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_update_public_Analyzer_monsterId_into_oplog ON \"public\".\"Analyzer\";",
        "    CREATE OR REPLACE FUNCTION compensation_update_public_Analyzer_monsterId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Analyzer';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'Monster',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"Monster\"\n          WHERE \"id\" = NEW.\"monsterId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_update_public_Analyzer_monsterId_into_oplog\n  AFTER UPDATE ON \"public\".\"Analyzer\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_update_public_Analyzer_monsterId_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_insert_public_Analyzer_updatedByUserId_into_oplog ON \"public\".\"Analyzer\";",
        "    CREATE OR REPLACE FUNCTION compensation_insert_public_Analyzer_updatedByUserId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Analyzer';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'UserUpdateData',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('userId', \"userId\"))),\n            jsonb_build_object('userId', \"userId\"),\n            NULL,\n            NULL\n          FROM \"public\".\"UserUpdateData\"\n          WHERE \"userId\" = NEW.\"updatedByUserId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_insert_public_Analyzer_updatedByUserId_into_oplog\n  AFTER INSERT ON \"public\".\"Analyzer\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_insert_public_Analyzer_updatedByUserId_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_update_public_Analyzer_updatedByUserId_into_oplog ON \"public\".\"Analyzer\";",
        "    CREATE OR REPLACE FUNCTION compensation_update_public_Analyzer_updatedByUserId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Analyzer';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'UserUpdateData',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('userId', \"userId\"))),\n            jsonb_build_object('userId', \"userId\"),\n            NULL,\n            NULL\n          FROM \"public\".\"UserUpdateData\"\n          WHERE \"userId\" = NEW.\"updatedByUserId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_update_public_Analyzer_updatedByUserId_into_oplog\n  AFTER UPDATE ON \"public\".\"Analyzer\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_update_public_Analyzer_updatedByUserId_into_oplog_function();",
        "INSERT INTO \"public\".\"_electric_trigger_settings\" (\"namespace\", \"tablename\", \"flag\")\n  VALUES ('public', 'Combo', 1)\n  ON CONFLICT DO NOTHING;",
        "DROP TRIGGER IF EXISTS update_ensure_public_Combo_primarykey ON \"public\".\"Combo\";",
        "CREATE OR REPLACE FUNCTION update_ensure_public_Combo_primarykey_function()\nRETURNS TRIGGER AS $$\nBEGIN\n  IF OLD.\"id\" IS DISTINCT FROM NEW.\"id\" THEN\n    RAISE EXCEPTION 'Cannot change the value of column id as it belongs to the primary key';\n  END IF;\n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;",
        "CREATE TRIGGER update_ensure_public_Combo_primarykey\n  BEFORE UPDATE ON \"public\".\"Combo\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_ensure_public_Combo_primarykey_function();",
        "DROP TRIGGER IF EXISTS insert_public_Combo_into_oplog ON \"public\".\"Combo\";",
        "    CREATE OR REPLACE FUNCTION insert_public_Combo_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Combo';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'Combo',\n            'INSERT',\n            json_strip_nulls(json_build_object('id', new.\"id\")),\n            jsonb_build_object('id', new.\"id\", 'name', new.\"name\", 'userCreateUserId', new.\"userCreateUserId\"),\n            NULL,\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER insert_public_Combo_into_oplog\n  AFTER INSERT ON \"public\".\"Combo\"\n    FOR EACH ROW\n      EXECUTE FUNCTION insert_public_Combo_into_oplog_function();",
        "DROP TRIGGER IF EXISTS update_public_Combo_into_oplog ON \"public\".\"Combo\";",
        "    CREATE OR REPLACE FUNCTION update_public_Combo_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Combo';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'Combo',\n            'UPDATE',\n            json_strip_nulls(json_build_object('id', new.\"id\")),\n            jsonb_build_object('id', new.\"id\", 'name', new.\"name\", 'userCreateUserId', new.\"userCreateUserId\"),\n            jsonb_build_object('id', old.\"id\", 'name', old.\"name\", 'userCreateUserId', old.\"userCreateUserId\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER update_public_Combo_into_oplog\n  AFTER UPDATE ON \"public\".\"Combo\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_public_Combo_into_oplog_function();",
        "DROP TRIGGER IF EXISTS delete_public_Combo_into_oplog ON \"public\".\"Combo\";",
        "    CREATE OR REPLACE FUNCTION delete_public_Combo_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Combo';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'Combo',\n            'DELETE',\n            json_strip_nulls(json_build_object('id', old.\"id\")),\n            NULL,\n            jsonb_build_object('id', old.\"id\", 'name', old.\"name\", 'userCreateUserId', old.\"userCreateUserId\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER delete_public_Combo_into_oplog\n  AFTER DELETE ON \"public\".\"Combo\"\n    FOR EACH ROW\n      EXECUTE FUNCTION delete_public_Combo_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_insert_public_Combo_userCreateUserId_into_oplog ON \"public\".\"Combo\";",
        "    CREATE OR REPLACE FUNCTION compensation_insert_public_Combo_userCreateUserId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Combo';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'UserCreateData',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('userId', \"userId\"))),\n            jsonb_build_object('userId', \"userId\"),\n            NULL,\n            NULL\n          FROM \"public\".\"UserCreateData\"\n          WHERE \"userId\" = NEW.\"userCreateUserId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_insert_public_Combo_userCreateUserId_into_oplog\n  AFTER INSERT ON \"public\".\"Combo\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_insert_public_Combo_userCreateUserId_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_update_public_Combo_userCreateUserId_into_oplog ON \"public\".\"Combo\";",
        "    CREATE OR REPLACE FUNCTION compensation_update_public_Combo_userCreateUserId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Combo';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'UserCreateData',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('userId', \"userId\"))),\n            jsonb_build_object('userId', \"userId\"),\n            NULL,\n            NULL\n          FROM \"public\".\"UserCreateData\"\n          WHERE \"userId\" = NEW.\"userCreateUserId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_update_public_Combo_userCreateUserId_into_oplog\n  AFTER UPDATE ON \"public\".\"Combo\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_update_public_Combo_userCreateUserId_into_oplog_function();",
        "INSERT INTO \"public\".\"_electric_trigger_settings\" (\"namespace\", \"tablename\", \"flag\")\n  VALUES ('public', 'ComboStep', 1)\n  ON CONFLICT DO NOTHING;",
        "DROP TRIGGER IF EXISTS update_ensure_public_ComboStep_primarykey ON \"public\".\"ComboStep\";",
        "CREATE OR REPLACE FUNCTION update_ensure_public_ComboStep_primarykey_function()\nRETURNS TRIGGER AS $$\nBEGIN\n  IF OLD.\"id\" IS DISTINCT FROM NEW.\"id\" THEN\n    RAISE EXCEPTION 'Cannot change the value of column id as it belongs to the primary key';\n  END IF;\n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;",
        "CREATE TRIGGER update_ensure_public_ComboStep_primarykey\n  BEFORE UPDATE ON \"public\".\"ComboStep\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_ensure_public_ComboStep_primarykey_function();",
        "DROP TRIGGER IF EXISTS insert_public_ComboStep_into_oplog ON \"public\".\"ComboStep\";",
        "    CREATE OR REPLACE FUNCTION insert_public_ComboStep_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'ComboStep';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'ComboStep',\n            'INSERT',\n            json_strip_nulls(json_build_object('id', new.\"id\")),\n            jsonb_build_object('comboId', new.\"comboId\", 'comboType', new.\"comboType\", 'id', new.\"id\", 'order', new.\"order\", 'skillId', new.\"skillId\"),\n            NULL,\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER insert_public_ComboStep_into_oplog\n  AFTER INSERT ON \"public\".\"ComboStep\"\n    FOR EACH ROW\n      EXECUTE FUNCTION insert_public_ComboStep_into_oplog_function();",
        "DROP TRIGGER IF EXISTS update_public_ComboStep_into_oplog ON \"public\".\"ComboStep\";",
        "    CREATE OR REPLACE FUNCTION update_public_ComboStep_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'ComboStep';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'ComboStep',\n            'UPDATE',\n            json_strip_nulls(json_build_object('id', new.\"id\")),\n            jsonb_build_object('comboId', new.\"comboId\", 'comboType', new.\"comboType\", 'id', new.\"id\", 'order', new.\"order\", 'skillId', new.\"skillId\"),\n            jsonb_build_object('comboId', old.\"comboId\", 'comboType', old.\"comboType\", 'id', old.\"id\", 'order', old.\"order\", 'skillId', old.\"skillId\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER update_public_ComboStep_into_oplog\n  AFTER UPDATE ON \"public\".\"ComboStep\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_public_ComboStep_into_oplog_function();",
        "DROP TRIGGER IF EXISTS delete_public_ComboStep_into_oplog ON \"public\".\"ComboStep\";",
        "    CREATE OR REPLACE FUNCTION delete_public_ComboStep_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'ComboStep';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'ComboStep',\n            'DELETE',\n            json_strip_nulls(json_build_object('id', old.\"id\")),\n            NULL,\n            jsonb_build_object('comboId', old.\"comboId\", 'comboType', old.\"comboType\", 'id', old.\"id\", 'order', old.\"order\", 'skillId', old.\"skillId\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER delete_public_ComboStep_into_oplog\n  AFTER DELETE ON \"public\".\"ComboStep\"\n    FOR EACH ROW\n      EXECUTE FUNCTION delete_public_ComboStep_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_insert_public_ComboStep_comboId_into_oplog ON \"public\".\"ComboStep\";",
        "    CREATE OR REPLACE FUNCTION compensation_insert_public_ComboStep_comboId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'ComboStep';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'Combo',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"Combo\"\n          WHERE \"id\" = NEW.\"comboId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_insert_public_ComboStep_comboId_into_oplog\n  AFTER INSERT ON \"public\".\"ComboStep\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_insert_public_ComboStep_comboId_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_update_public_ComboStep_comboId_into_oplog ON \"public\".\"ComboStep\";",
        "    CREATE OR REPLACE FUNCTION compensation_update_public_ComboStep_comboId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'ComboStep';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'Combo',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"Combo\"\n          WHERE \"id\" = NEW.\"comboId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_update_public_ComboStep_comboId_into_oplog\n  AFTER UPDATE ON \"public\".\"ComboStep\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_update_public_ComboStep_comboId_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_insert_public_ComboStep_skillId_into_oplog ON \"public\".\"ComboStep\";",
        "    CREATE OR REPLACE FUNCTION compensation_insert_public_ComboStep_skillId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'ComboStep';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'Skill',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"Skill\"\n          WHERE \"id\" = NEW.\"skillId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_insert_public_ComboStep_skillId_into_oplog\n  AFTER INSERT ON \"public\".\"ComboStep\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_insert_public_ComboStep_skillId_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_update_public_ComboStep_skillId_into_oplog ON \"public\".\"ComboStep\";",
        "    CREATE OR REPLACE FUNCTION compensation_update_public_ComboStep_skillId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'ComboStep';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'Skill',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"Skill\"\n          WHERE \"id\" = NEW.\"skillId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_update_public_ComboStep_skillId_into_oplog\n  AFTER UPDATE ON \"public\".\"ComboStep\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_update_public_ComboStep_skillId_into_oplog_function();",
        "INSERT INTO \"public\".\"_electric_trigger_settings\" (\"namespace\", \"tablename\", \"flag\")\n  VALUES ('public', 'Process', 1)\n  ON CONFLICT DO NOTHING;",
        "DROP TRIGGER IF EXISTS update_ensure_public_Process_primarykey ON \"public\".\"Process\";",
        "CREATE OR REPLACE FUNCTION update_ensure_public_Process_primarykey_function()\nRETURNS TRIGGER AS $$\nBEGIN\n  IF OLD.\"id\" IS DISTINCT FROM NEW.\"id\" THEN\n    RAISE EXCEPTION 'Cannot change the value of column id as it belongs to the primary key';\n  END IF;\n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;",
        "CREATE TRIGGER update_ensure_public_Process_primarykey\n  BEFORE UPDATE ON \"public\".\"Process\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_ensure_public_Process_primarykey_function();",
        "DROP TRIGGER IF EXISTS insert_public_Process_into_oplog ON \"public\".\"Process\";",
        "    CREATE OR REPLACE FUNCTION insert_public_Process_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Process';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'Process',\n            'INSERT',\n            json_strip_nulls(json_build_object('id', new.\"id\")),\n            jsonb_build_object('analyzerId', new.\"analyzerId\", 'id', new.\"id\"),\n            NULL,\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER insert_public_Process_into_oplog\n  AFTER INSERT ON \"public\".\"Process\"\n    FOR EACH ROW\n      EXECUTE FUNCTION insert_public_Process_into_oplog_function();",
        "DROP TRIGGER IF EXISTS update_public_Process_into_oplog ON \"public\".\"Process\";",
        "    CREATE OR REPLACE FUNCTION update_public_Process_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Process';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'Process',\n            'UPDATE',\n            json_strip_nulls(json_build_object('id', new.\"id\")),\n            jsonb_build_object('analyzerId', new.\"analyzerId\", 'id', new.\"id\"),\n            jsonb_build_object('analyzerId', old.\"analyzerId\", 'id', old.\"id\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER update_public_Process_into_oplog\n  AFTER UPDATE ON \"public\".\"Process\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_public_Process_into_oplog_function();",
        "DROP TRIGGER IF EXISTS delete_public_Process_into_oplog ON \"public\".\"Process\";",
        "    CREATE OR REPLACE FUNCTION delete_public_Process_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Process';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'Process',\n            'DELETE',\n            json_strip_nulls(json_build_object('id', old.\"id\")),\n            NULL,\n            jsonb_build_object('analyzerId', old.\"analyzerId\", 'id', old.\"id\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER delete_public_Process_into_oplog\n  AFTER DELETE ON \"public\".\"Process\"\n    FOR EACH ROW\n      EXECUTE FUNCTION delete_public_Process_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_insert_public_Process_analyzerId_into_oplog ON \"public\".\"Process\";",
        "    CREATE OR REPLACE FUNCTION compensation_insert_public_Process_analyzerId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Process';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'Analyzer',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"Analyzer\"\n          WHERE \"id\" = NEW.\"analyzerId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_insert_public_Process_analyzerId_into_oplog\n  AFTER INSERT ON \"public\".\"Process\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_insert_public_Process_analyzerId_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_update_public_Process_analyzerId_into_oplog ON \"public\".\"Process\";",
        "    CREATE OR REPLACE FUNCTION compensation_update_public_Process_analyzerId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Process';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'Analyzer',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"Analyzer\"\n          WHERE \"id\" = NEW.\"analyzerId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_update_public_Process_analyzerId_into_oplog\n  AFTER UPDATE ON \"public\".\"Process\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_update_public_Process_analyzerId_into_oplog_function();",
        "INSERT INTO \"public\".\"_electric_trigger_settings\" (\"namespace\", \"tablename\", \"flag\")\n  VALUES ('public', 'Step', 1)\n  ON CONFLICT DO NOTHING;",
        "DROP TRIGGER IF EXISTS update_ensure_public_Step_primarykey ON \"public\".\"Step\";",
        "CREATE OR REPLACE FUNCTION update_ensure_public_Step_primarykey_function()\nRETURNS TRIGGER AS $$\nBEGIN\n  IF OLD.\"id\" IS DISTINCT FROM NEW.\"id\" THEN\n    RAISE EXCEPTION 'Cannot change the value of column id as it belongs to the primary key';\n  END IF;\n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;",
        "CREATE TRIGGER update_ensure_public_Step_primarykey\n  BEFORE UPDATE ON \"public\".\"Step\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_ensure_public_Step_primarykey_function();",
        "DROP TRIGGER IF EXISTS insert_public_Step_into_oplog ON \"public\".\"Step\";",
        "    CREATE OR REPLACE FUNCTION insert_public_Step_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Step';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'Step',\n            'INSERT',\n            json_strip_nulls(json_build_object('id', new.\"id\")),\n            jsonb_build_object('id', new.\"id\", 'order', new.\"order\", 'processId', new.\"processId\", 'skillId', new.\"skillId\"),\n            NULL,\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER insert_public_Step_into_oplog\n  AFTER INSERT ON \"public\".\"Step\"\n    FOR EACH ROW\n      EXECUTE FUNCTION insert_public_Step_into_oplog_function();",
        "DROP TRIGGER IF EXISTS update_public_Step_into_oplog ON \"public\".\"Step\";",
        "    CREATE OR REPLACE FUNCTION update_public_Step_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Step';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'Step',\n            'UPDATE',\n            json_strip_nulls(json_build_object('id', new.\"id\")),\n            jsonb_build_object('id', new.\"id\", 'order', new.\"order\", 'processId', new.\"processId\", 'skillId', new.\"skillId\"),\n            jsonb_build_object('id', old.\"id\", 'order', old.\"order\", 'processId', old.\"processId\", 'skillId', old.\"skillId\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER update_public_Step_into_oplog\n  AFTER UPDATE ON \"public\".\"Step\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_public_Step_into_oplog_function();",
        "DROP TRIGGER IF EXISTS delete_public_Step_into_oplog ON \"public\".\"Step\";",
        "    CREATE OR REPLACE FUNCTION delete_public_Step_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Step';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'Step',\n            'DELETE',\n            json_strip_nulls(json_build_object('id', old.\"id\")),\n            NULL,\n            jsonb_build_object('id', old.\"id\", 'order', old.\"order\", 'processId', old.\"processId\", 'skillId', old.\"skillId\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER delete_public_Step_into_oplog\n  AFTER DELETE ON \"public\".\"Step\"\n    FOR EACH ROW\n      EXECUTE FUNCTION delete_public_Step_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_insert_public_Step_processId_into_oplog ON \"public\".\"Step\";",
        "    CREATE OR REPLACE FUNCTION compensation_insert_public_Step_processId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Step';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'Process',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"Process\"\n          WHERE \"id\" = NEW.\"processId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_insert_public_Step_processId_into_oplog\n  AFTER INSERT ON \"public\".\"Step\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_insert_public_Step_processId_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_update_public_Step_processId_into_oplog ON \"public\".\"Step\";",
        "    CREATE OR REPLACE FUNCTION compensation_update_public_Step_processId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Step';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'Process',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"Process\"\n          WHERE \"id\" = NEW.\"processId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_update_public_Step_processId_into_oplog\n  AFTER UPDATE ON \"public\".\"Step\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_update_public_Step_processId_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_insert_public_Step_skillId_into_oplog ON \"public\".\"Step\";",
        "    CREATE OR REPLACE FUNCTION compensation_insert_public_Step_skillId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Step';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'Skill',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"Skill\"\n          WHERE \"id\" = NEW.\"skillId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_insert_public_Step_skillId_into_oplog\n  AFTER INSERT ON \"public\".\"Step\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_insert_public_Step_skillId_into_oplog_function();",
        "DROP TRIGGER IF EXISTS compensation_update_public_Step_skillId_into_oplog ON \"public\".\"Step\";",
        "    CREATE OR REPLACE FUNCTION compensation_update_public_Step_skillId_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'Step';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'Skill',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"Skill\"\n          WHERE \"id\" = NEW.\"skillId\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
        "CREATE TRIGGER compensation_update_public_Step_skillId_into_oplog\n  AFTER UPDATE ON \"public\".\"Step\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_update_public_Step_skillId_into_oplog_function();"
      ],
      "version": "2"
    }
  ]